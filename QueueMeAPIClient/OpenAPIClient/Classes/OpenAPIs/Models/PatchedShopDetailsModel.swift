//
// PatchedShopDetailsModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PatchedShopDetailsModel: Codable, JSONEncodable, Hashable {

    public static let nameRule = StringRule(minLength: nil, maxLength: 300, pattern: nil)
    public static let noteRule = StringRule(minLength: nil, maxLength: 300, pattern: nil)
    public static let customerServicePhoneRule = StringRule(minLength: nil, maxLength: 30, pattern: nil)
    public static let addressRule = StringRule(minLength: nil, maxLength: 300, pattern: nil)
    public static let usernameRule = StringRule(minLength: nil, maxLength: 20, pattern: nil)
    public static let shopNameRule = StringRule(minLength: nil, maxLength: 300, pattern: nil)
    public static let countryRule = StringRule(minLength: nil, maxLength: 80, pattern: nil)
    public static let cityRule = StringRule(minLength: nil, maxLength: 300, pattern: nil)
    public static let districtRule = StringRule(minLength: nil, maxLength: 300, pattern: nil)
    public static let managerPhoneNumberRule = StringRule(minLength: nil, maxLength: 20, pattern: nil)
    public var id: Int?
    public var employeeCount: Int?
    public var name: String?
    public var description: String?
    public var note: String?
    public var customerServicePhone: String?
    public var address: String?
    public var latitude: Double?
    public var longitude: Double?
    public var coverImage: String?
    public var avatarImage: String?
    public var username: String?
    public var shopName: String?
    public var country: String?
    public var city: String?
    public var district: String?
    public var customersType: CustomersTypeEnum?
    public var servicesTypes: ServicesTypesEnum?
    public var onlinePaymentRequested: Bool?
    public var bankDetailsDocument: String?
    public var onlinePaymentStatus: OnlinePaymentStatusEnum?
    /** AI recommendation metadata */
    public var aiRecommendations: AnyCodable?
    /** AI personalization metadata */
    public var aiPersonalization: AnyCodable?
    /** Creation timestamp */
    public var createdAt: Date?
    /** Manager Phone Number (used for branch login) */
    public var managerPhoneNumber: String?
    public var owner: Int?
    public var company: Int?

    public init(id: Int? = nil, employeeCount: Int? = nil, name: String? = nil, description: String? = nil, note: String? = nil, customerServicePhone: String? = nil, address: String? = nil, latitude: Double? = nil, longitude: Double? = nil, coverImage: String? = nil, avatarImage: String? = nil, username: String? = nil, shopName: String? = nil, country: String? = nil, city: String? = nil, district: String? = nil, customersType: CustomersTypeEnum? = nil, servicesTypes: ServicesTypesEnum? = nil, onlinePaymentRequested: Bool? = nil, bankDetailsDocument: String? = nil, onlinePaymentStatus: OnlinePaymentStatusEnum? = nil, aiRecommendations: AnyCodable? = nil, aiPersonalization: AnyCodable? = nil, createdAt: Date? = nil, managerPhoneNumber: String? = nil, owner: Int? = nil, company: Int? = nil) {
        self.id = id
        self.employeeCount = employeeCount
        self.name = name
        self.description = description
        self.note = note
        self.customerServicePhone = customerServicePhone
        self.address = address
        self.latitude = latitude
        self.longitude = longitude
        self.coverImage = coverImage
        self.avatarImage = avatarImage
        self.username = username
        self.shopName = shopName
        self.country = country
        self.city = city
        self.district = district
        self.customersType = customersType
        self.servicesTypes = servicesTypes
        self.onlinePaymentRequested = onlinePaymentRequested
        self.bankDetailsDocument = bankDetailsDocument
        self.onlinePaymentStatus = onlinePaymentStatus
        self.aiRecommendations = aiRecommendations
        self.aiPersonalization = aiPersonalization
        self.createdAt = createdAt
        self.managerPhoneNumber = managerPhoneNumber
        self.owner = owner
        self.company = company
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case employeeCount = "employee_count"
        case name
        case description
        case note
        case customerServicePhone = "customer_service_phone"
        case address
        case latitude
        case longitude
        case coverImage = "cover_image"
        case avatarImage = "avatar_image"
        case username
        case shopName = "shop_name"
        case country
        case city
        case district
        case customersType = "customers_type"
        case servicesTypes = "services_types"
        case onlinePaymentRequested = "online_payment_requested"
        case bankDetailsDocument = "bank_details_document"
        case onlinePaymentStatus = "online_payment_status"
        case aiRecommendations = "ai_recommendations"
        case aiPersonalization = "ai_personalization"
        case createdAt = "created_at"
        case managerPhoneNumber = "manager_phone_number"
        case owner
        case company
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(employeeCount, forKey: .employeeCount)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(note, forKey: .note)
        try container.encodeIfPresent(customerServicePhone, forKey: .customerServicePhone)
        try container.encodeIfPresent(address, forKey: .address)
        try container.encodeIfPresent(latitude, forKey: .latitude)
        try container.encodeIfPresent(longitude, forKey: .longitude)
        try container.encodeIfPresent(coverImage, forKey: .coverImage)
        try container.encodeIfPresent(avatarImage, forKey: .avatarImage)
        try container.encodeIfPresent(username, forKey: .username)
        try container.encodeIfPresent(shopName, forKey: .shopName)
        try container.encodeIfPresent(country, forKey: .country)
        try container.encodeIfPresent(city, forKey: .city)
        try container.encodeIfPresent(district, forKey: .district)
        try container.encodeIfPresent(customersType, forKey: .customersType)
        try container.encodeIfPresent(servicesTypes, forKey: .servicesTypes)
        try container.encodeIfPresent(onlinePaymentRequested, forKey: .onlinePaymentRequested)
        try container.encodeIfPresent(bankDetailsDocument, forKey: .bankDetailsDocument)
        try container.encodeIfPresent(onlinePaymentStatus, forKey: .onlinePaymentStatus)
        try container.encodeIfPresent(aiRecommendations, forKey: .aiRecommendations)
        try container.encodeIfPresent(aiPersonalization, forKey: .aiPersonalization)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(managerPhoneNumber, forKey: .managerPhoneNumber)
        try container.encodeIfPresent(owner, forKey: .owner)
        try container.encodeIfPresent(company, forKey: .company)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension PatchedShopDetailsModel: Identifiable {}
