//
// PatchedShopSpecialistDetailsModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PatchedShopSpecialistDetailsModel: Codable, JSONEncodable, Hashable {

    public static let specialityRule = StringRule(minLength: nil, maxLength: 300, pattern: nil)
    public var id: Int?
    public var speciality: String?
    public var serviceLocation: ServiceLocationEnum?
    public var isActive: Bool?
    public var avatarImage: String?
    public var rating: Double?
    public var shop: [Int]?
    public var specialistType: [Int]?
    public var services: [Int]?

    public init(id: Int? = nil, speciality: String? = nil, serviceLocation: ServiceLocationEnum? = nil, isActive: Bool? = nil, avatarImage: String? = nil, rating: Double? = nil, shop: [Int]? = nil, specialistType: [Int]? = nil, services: [Int]? = nil) {
        self.id = id
        self.speciality = speciality
        self.serviceLocation = serviceLocation
        self.isActive = isActive
        self.avatarImage = avatarImage
        self.rating = rating
        self.shop = shop
        self.specialistType = specialistType
        self.services = services
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case speciality
        case serviceLocation = "service_location"
        case isActive = "is_active"
        case avatarImage = "avatar_image"
        case rating
        case shop
        case specialistType = "specialist_type"
        case services
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(speciality, forKey: .speciality)
        try container.encodeIfPresent(serviceLocation, forKey: .serviceLocation)
        try container.encodeIfPresent(isActive, forKey: .isActive)
        try container.encodeIfPresent(avatarImage, forKey: .avatarImage)
        try container.encodeIfPresent(rating, forKey: .rating)
        try container.encodeIfPresent(shop, forKey: .shop)
        try container.encodeIfPresent(specialistType, forKey: .specialistType)
        try container.encodeIfPresent(services, forKey: .services)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension PatchedShopSpecialistDetailsModel: Identifiable {}
