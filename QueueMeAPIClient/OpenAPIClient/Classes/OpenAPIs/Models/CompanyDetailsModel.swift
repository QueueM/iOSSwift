//
// CompanyDetailsModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Serializer for CompanyDetailsModel instances. */
public struct CompanyDetailsModel: Codable, JSONEncodable, Hashable {

    public static let nameRule = StringRule(minLength: nil, maxLength: 300, pattern: nil)
    public static let shopsLimitRule = NumericRule<Int64>(minimum: -9223372036854775808, exclusiveMinimum: false, maximum: 9223372036854775807, exclusiveMaximum: false, multipleOf: nil)
    public static let nameArabicRule = StringRule(minLength: nil, maxLength: 300, pattern: nil)
    public static let taxNumberRule = StringRule(minLength: nil, maxLength: 30, pattern: nil)
    public var user: Int
    public var name: String
    public var companyImage: String?
    public var description: String?
    public var address: String?
    public var isVerified: Bool?
    public var status: CompanyDetailsModelStatusEnum?
    public var shopsLimit: Int64?
    public var merchantType: MerchantTypeEnum?
    public var nameArabic: String?
    public var registrationDocument: String?
    public var taxNumber: String?
    /** If enabled, all shops for this company will be eligible for online payments. */
    public var onlinePaymentGlobalEnabled: Bool?
    /** AI forecast metadata (will JSONâ€‘encode datetimes/timestamps) */
    public var forecastData: AnyCodable?
    /** Flag if potential fraud detected */
    public var fraudFlag: Bool?
    /** Creation timestamp */
    public var createdAt: Date

    public init(user: Int, name: String, companyImage: String? = nil, description: String? = nil, address: String? = nil, isVerified: Bool? = nil, status: CompanyDetailsModelStatusEnum? = nil, shopsLimit: Int64? = nil, merchantType: MerchantTypeEnum? = nil, nameArabic: String? = nil, registrationDocument: String? = nil, taxNumber: String? = nil, onlinePaymentGlobalEnabled: Bool? = nil, forecastData: AnyCodable? = nil, fraudFlag: Bool? = nil, createdAt: Date) {
        self.user = user
        self.name = name
        self.companyImage = companyImage
        self.description = description
        self.address = address
        self.isVerified = isVerified
        self.status = status
        self.shopsLimit = shopsLimit
        self.merchantType = merchantType
        self.nameArabic = nameArabic
        self.registrationDocument = registrationDocument
        self.taxNumber = taxNumber
        self.onlinePaymentGlobalEnabled = onlinePaymentGlobalEnabled
        self.forecastData = forecastData
        self.fraudFlag = fraudFlag
        self.createdAt = createdAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case user
        case name
        case companyImage = "company_image"
        case description
        case address
        case isVerified = "is_verified"
        case status
        case shopsLimit = "shops_limit"
        case merchantType = "merchant_type"
        case nameArabic = "name_arabic"
        case registrationDocument = "registration_document"
        case taxNumber = "tax_number"
        case onlinePaymentGlobalEnabled = "online_payment_global_enabled"
        case forecastData = "forecast_data"
        case fraudFlag = "fraud_flag"
        case createdAt = "created_at"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(user, forKey: .user)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(companyImage, forKey: .companyImage)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(address, forKey: .address)
        try container.encodeIfPresent(isVerified, forKey: .isVerified)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(shopsLimit, forKey: .shopsLimit)
        try container.encodeIfPresent(merchantType, forKey: .merchantType)
        try container.encodeIfPresent(nameArabic, forKey: .nameArabic)
        try container.encodeIfPresent(registrationDocument, forKey: .registrationDocument)
        try container.encodeIfPresent(taxNumber, forKey: .taxNumber)
        try container.encodeIfPresent(onlinePaymentGlobalEnabled, forKey: .onlinePaymentGlobalEnabled)
        try container.encodeIfPresent(forecastData, forKey: .forecastData)
        try container.encodeIfPresent(fraudFlag, forKey: .fraudFlag)
        try container.encode(createdAt, forKey: .createdAt)
    }
}

