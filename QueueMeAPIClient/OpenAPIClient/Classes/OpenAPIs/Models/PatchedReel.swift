//
// PatchedReel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PatchedReel: Codable, JSONEncodable, Hashable {

    public static let viewCountRule = NumericRule<Int64>(minimum: 0, exclusiveMinimum: false, maximum: 9223372036854775807, exclusiveMaximum: false, multipleOf: nil)
    public static let shareCountRule = NumericRule<Int64>(minimum: 0, exclusiveMinimum: false, maximum: 9223372036854775807, exclusiveMaximum: false, multipleOf: nil)
    public static let saveCountRule = NumericRule<Int64>(minimum: 0, exclusiveMinimum: false, maximum: 9223372036854775807, exclusiveMaximum: false, multipleOf: nil)
    public static let processedVideoUrlRule = StringRule(minLength: nil, maxLength: 200, pattern: nil)
    public var id: Int?
    public var shop: Int?
    public var video: String?
    public var videoUrl: String?
    public var thumbnail: String?
    public var thumbnailUrl: String?
    public var caption: String?
    public var createdAt: Date?
    public var likeCount: Int?
    public var viewCount: Int64?
    public var shareCount: Int64?
    public var saveCount: Int64?
    /** AI-generated tags for this video */
    public var aiVideoTags: AnyCodable?
    /** URL for processed/transcoded video */
    public var processedVideoUrl: String?
    /** Advanced analytics data */
    public var analyticsData: AnyCodable?

    public init(id: Int? = nil, shop: Int? = nil, video: String? = nil, videoUrl: String? = nil, thumbnail: String? = nil, thumbnailUrl: String? = nil, caption: String? = nil, createdAt: Date? = nil, likeCount: Int? = nil, viewCount: Int64? = nil, shareCount: Int64? = nil, saveCount: Int64? = nil, aiVideoTags: AnyCodable? = nil, processedVideoUrl: String? = nil, analyticsData: AnyCodable? = nil) {
        self.id = id
        self.shop = shop
        self.video = video
        self.videoUrl = videoUrl
        self.thumbnail = thumbnail
        self.thumbnailUrl = thumbnailUrl
        self.caption = caption
        self.createdAt = createdAt
        self.likeCount = likeCount
        self.viewCount = viewCount
        self.shareCount = shareCount
        self.saveCount = saveCount
        self.aiVideoTags = aiVideoTags
        self.processedVideoUrl = processedVideoUrl
        self.analyticsData = analyticsData
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case shop
        case video
        case videoUrl = "video_url"
        case thumbnail
        case thumbnailUrl = "thumbnail_url"
        case caption
        case createdAt = "created_at"
        case likeCount = "like_count"
        case viewCount = "view_count"
        case shareCount = "share_count"
        case saveCount = "save_count"
        case aiVideoTags = "ai_video_tags"
        case processedVideoUrl = "processed_video_url"
        case analyticsData = "analytics_data"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(shop, forKey: .shop)
        try container.encodeIfPresent(video, forKey: .video)
        try container.encodeIfPresent(videoUrl, forKey: .videoUrl)
        try container.encodeIfPresent(thumbnail, forKey: .thumbnail)
        try container.encodeIfPresent(thumbnailUrl, forKey: .thumbnailUrl)
        try container.encodeIfPresent(caption, forKey: .caption)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(likeCount, forKey: .likeCount)
        try container.encodeIfPresent(viewCount, forKey: .viewCount)
        try container.encodeIfPresent(shareCount, forKey: .shareCount)
        try container.encodeIfPresent(saveCount, forKey: .saveCount)
        try container.encodeIfPresent(aiVideoTags, forKey: .aiVideoTags)
        try container.encodeIfPresent(processedVideoUrl, forKey: .processedVideoUrl)
        try container.encodeIfPresent(analyticsData, forKey: .analyticsData)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension PatchedReel: Identifiable {}
