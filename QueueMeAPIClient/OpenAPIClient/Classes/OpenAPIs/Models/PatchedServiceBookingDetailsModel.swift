//
// PatchedServiceBookingDetailsModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PatchedServiceBookingDetailsModel: Codable, JSONEncodable, Hashable {

    public static let priceRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^-?\\d{0,8}(?:\\.\\d{0,2})?$/")
    public static let finalAmountRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^-?\\d{0,8}(?:\\.\\d{0,2})?$/")
    public var id: Int?
    public var bookingDate: Date?
    public var bookingTime: String?
    public var price: Decimal?
    public var finalAmount: Decimal?
    public var status: ServiceBookingDetailsModelStatusEnum?
    public var paymentStatus: PaymentStatusEnum?
    public var createdAt: Date?
    public var fraudFlag: Bool?
    public var user: Int?
    public var customer: Int?
    public var service: Int?

    public init(id: Int? = nil, bookingDate: Date? = nil, bookingTime: String? = nil, price: Decimal? = nil, finalAmount: Decimal? = nil, status: ServiceBookingDetailsModelStatusEnum? = nil, paymentStatus: PaymentStatusEnum? = nil, createdAt: Date? = nil, fraudFlag: Bool? = nil, user: Int? = nil, customer: Int? = nil, service: Int? = nil) {
        self.id = id
        self.bookingDate = bookingDate
        self.bookingTime = bookingTime
        self.price = price
        self.finalAmount = finalAmount
        self.status = status
        self.paymentStatus = paymentStatus
        self.createdAt = createdAt
        self.fraudFlag = fraudFlag
        self.user = user
        self.customer = customer
        self.service = service
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case bookingDate = "booking_date"
        case bookingTime = "booking_time"
        case price
        case finalAmount = "final_amount"
        case status
        case paymentStatus = "payment_status"
        case createdAt = "created_at"
        case fraudFlag = "fraud_flag"
        case user
        case customer
        case service
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(bookingDate, forKey: .bookingDate)
        try container.encodeIfPresent(bookingTime, forKey: .bookingTime)
        try container.encodeIfPresent(price, forKey: .price)
        try container.encodeIfPresent(finalAmount, forKey: .finalAmount)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(paymentStatus, forKey: .paymentStatus)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(fraudFlag, forKey: .fraudFlag)
        try container.encodeIfPresent(user, forKey: .user)
        try container.encodeIfPresent(customer, forKey: .customer)
        try container.encodeIfPresent(service, forKey: .service)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension PatchedServiceBookingDetailsModel: Identifiable {}
