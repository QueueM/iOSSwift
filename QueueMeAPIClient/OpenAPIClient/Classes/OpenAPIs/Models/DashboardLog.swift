//
// DashboardLog.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct DashboardLog: Codable, JSONEncodable, Hashable {

    public var id: Int
    public var timestamp: Date
    public var company: Int
    public var companyName: String
    public var shop: Int?
    public var branchName: String = ""
    public var totalBookings: Int
    public var totalRevenue: Double
    public var totalSpecialists: Int
    public var totalWaiting: Int
    public var totalInProgress: Int
    public var totalCompleted: Int
    public var totalCancelled: Int
    public var estimatedWaitTime: String
    public var totalEmployees: Int
    public var averageSalary: Double
    public var totalCustomers: Int
    public var customerRetentionRate: Double
    public var averageRating: Double
    public var totalReelsLikes: Int
    public var totalAdImpressions: Int
    public var totalAdViewers: Int
    public var totalAdClicks: Int
    public var totalStories: Int
    public var totalStoryLikes: Int
    public var totalReels: Int
    public var totalCommentsPerReel: Int
    public var topServices: AnyCodable?

    public init(id: Int, timestamp: Date, company: Int, companyName: String, shop: Int?, branchName: String = "", totalBookings: Int, totalRevenue: Double, totalSpecialists: Int, totalWaiting: Int, totalInProgress: Int, totalCompleted: Int, totalCancelled: Int, estimatedWaitTime: String, totalEmployees: Int, averageSalary: Double, totalCustomers: Int, customerRetentionRate: Double, averageRating: Double, totalReelsLikes: Int, totalAdImpressions: Int, totalAdViewers: Int, totalAdClicks: Int, totalStories: Int, totalStoryLikes: Int, totalReels: Int, totalCommentsPerReel: Int, topServices: AnyCodable?) {
        self.id = id
        self.timestamp = timestamp
        self.company = company
        self.companyName = companyName
        self.shop = shop
        self.branchName = branchName
        self.totalBookings = totalBookings
        self.totalRevenue = totalRevenue
        self.totalSpecialists = totalSpecialists
        self.totalWaiting = totalWaiting
        self.totalInProgress = totalInProgress
        self.totalCompleted = totalCompleted
        self.totalCancelled = totalCancelled
        self.estimatedWaitTime = estimatedWaitTime
        self.totalEmployees = totalEmployees
        self.averageSalary = averageSalary
        self.totalCustomers = totalCustomers
        self.customerRetentionRate = customerRetentionRate
        self.averageRating = averageRating
        self.totalReelsLikes = totalReelsLikes
        self.totalAdImpressions = totalAdImpressions
        self.totalAdViewers = totalAdViewers
        self.totalAdClicks = totalAdClicks
        self.totalStories = totalStories
        self.totalStoryLikes = totalStoryLikes
        self.totalReels = totalReels
        self.totalCommentsPerReel = totalCommentsPerReel
        self.topServices = topServices
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case timestamp
        case company
        case companyName = "company_name"
        case shop
        case branchName = "branch_name"
        case totalBookings = "total_bookings"
        case totalRevenue = "total_revenue"
        case totalSpecialists = "total_specialists"
        case totalWaiting = "total_waiting"
        case totalInProgress = "total_in_progress"
        case totalCompleted = "total_completed"
        case totalCancelled = "total_cancelled"
        case estimatedWaitTime = "estimated_wait_time"
        case totalEmployees = "total_employees"
        case averageSalary = "average_salary"
        case totalCustomers = "total_customers"
        case customerRetentionRate = "customer_retention_rate"
        case averageRating = "average_rating"
        case totalReelsLikes = "total_reels_likes"
        case totalAdImpressions = "total_ad_impressions"
        case totalAdViewers = "total_ad_viewers"
        case totalAdClicks = "total_ad_clicks"
        case totalStories = "total_stories"
        case totalStoryLikes = "total_story_likes"
        case totalReels = "total_reels"
        case totalCommentsPerReel = "total_comments_per_reel"
        case topServices = "top_services"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(timestamp, forKey: .timestamp)
        try container.encode(company, forKey: .company)
        try container.encode(companyName, forKey: .companyName)
        try container.encode(shop, forKey: .shop)
        try container.encode(branchName, forKey: .branchName)
        try container.encode(totalBookings, forKey: .totalBookings)
        try container.encode(totalRevenue, forKey: .totalRevenue)
        try container.encode(totalSpecialists, forKey: .totalSpecialists)
        try container.encode(totalWaiting, forKey: .totalWaiting)
        try container.encode(totalInProgress, forKey: .totalInProgress)
        try container.encode(totalCompleted, forKey: .totalCompleted)
        try container.encode(totalCancelled, forKey: .totalCancelled)
        try container.encode(estimatedWaitTime, forKey: .estimatedWaitTime)
        try container.encode(totalEmployees, forKey: .totalEmployees)
        try container.encode(averageSalary, forKey: .averageSalary)
        try container.encode(totalCustomers, forKey: .totalCustomers)
        try container.encode(customerRetentionRate, forKey: .customerRetentionRate)
        try container.encode(averageRating, forKey: .averageRating)
        try container.encode(totalReelsLikes, forKey: .totalReelsLikes)
        try container.encode(totalAdImpressions, forKey: .totalAdImpressions)
        try container.encode(totalAdViewers, forKey: .totalAdViewers)
        try container.encode(totalAdClicks, forKey: .totalAdClicks)
        try container.encode(totalStories, forKey: .totalStories)
        try container.encode(totalStoryLikes, forKey: .totalStoryLikes)
        try container.encode(totalReels, forKey: .totalReels)
        try container.encode(totalCommentsPerReel, forKey: .totalCommentsPerReel)
        try container.encode(topServices, forKey: .topServices)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension DashboardLog: Identifiable {}
