//
// ApiAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ApiAPI {

    /**

     - parameter churnPredictionRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiAiChurnCreate(churnPredictionRequest: ChurnPredictionRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ChurnPredictionResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return apiAiChurnCreateWithRequestBuilder(churnPredictionRequest: churnPredictionRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/ai/churn/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter churnPredictionRequest: (body)  
     - returns: RequestBuilder<ChurnPredictionResponse> 
     */
    open class func apiAiChurnCreateWithRequestBuilder(churnPredictionRequest: ChurnPredictionRequest) -> RequestBuilder<ChurnPredictionResponse> {
        let localVariablePath = "/api/ai/churn/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: churnPredictionRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ChurnPredictionResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter employeePerformanceRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiAiEmployeePerformanceCreate(employeePerformanceRequest: EmployeePerformanceRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EmployeePerformanceResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return apiAiEmployeePerformanceCreateWithRequestBuilder(employeePerformanceRequest: employeePerformanceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/ai/employee-performance/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter employeePerformanceRequest: (body)  
     - returns: RequestBuilder<EmployeePerformanceResponse> 
     */
    open class func apiAiEmployeePerformanceCreateWithRequestBuilder(employeePerformanceRequest: EmployeePerformanceRequest) -> RequestBuilder<EmployeePerformanceResponse> {
        let localVariablePath = "/api/ai/employee-performance/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: employeePerformanceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmployeePerformanceResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter forecastingRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiAiForecastingCreate(forecastingRequest: ForecastingRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ForecastingResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return apiAiForecastingCreateWithRequestBuilder(forecastingRequest: forecastingRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/ai/forecasting/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter forecastingRequest: (body)  
     - returns: RequestBuilder<ForecastingResponse> 
     */
    open class func apiAiForecastingCreateWithRequestBuilder(forecastingRequest: ForecastingRequest) -> RequestBuilder<ForecastingResponse> {
        let localVariablePath = "/api/ai/forecasting/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: forecastingRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ForecastingResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter fraudDetectionRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiAiFraudCreate(fraudDetectionRequest: FraudDetectionRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: FraudDetectionResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return apiAiFraudCreateWithRequestBuilder(fraudDetectionRequest: fraudDetectionRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/ai/fraud/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter fraudDetectionRequest: (body)  
     - returns: RequestBuilder<FraudDetectionResponse> 
     */
    open class func apiAiFraudCreateWithRequestBuilder(fraudDetectionRequest: FraudDetectionRequest) -> RequestBuilder<FraudDetectionResponse> {
        let localVariablePath = "/api/ai/fraud/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: fraudDetectionRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FraudDetectionResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter imageAnalysisRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiAiImageAnalysisCreate(imageAnalysisRequest: ImageAnalysisRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ImageAnalysisResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return apiAiImageAnalysisCreateWithRequestBuilder(imageAnalysisRequest: imageAnalysisRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/ai/image-analysis/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter imageAnalysisRequest: (body)  
     - returns: RequestBuilder<ImageAnalysisResponse> 
     */
    open class func apiAiImageAnalysisCreateWithRequestBuilder(imageAnalysisRequest: ImageAnalysisRequest) -> RequestBuilder<ImageAnalysisResponse> {
        let localVariablePath = "/api/ai/image-analysis/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: imageAnalysisRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ImageAnalysisResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter personalizationRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiAiPersonalizationCreate(personalizationRequest: PersonalizationRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PersonalizationResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return apiAiPersonalizationCreateWithRequestBuilder(personalizationRequest: personalizationRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/ai/personalization/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter personalizationRequest: (body)  
     - returns: RequestBuilder<PersonalizationResponse> 
     */
    open class func apiAiPersonalizationCreateWithRequestBuilder(personalizationRequest: PersonalizationRequest) -> RequestBuilder<PersonalizationResponse> {
        let localVariablePath = "/api/ai/personalization/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: personalizationRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PersonalizationResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiAiRecommendationsRetrieve(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: RecommendationResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return apiAiRecommendationsRetrieveWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/ai/recommendations/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - returns: RequestBuilder<RecommendationResponse> 
     */
    open class func apiAiRecommendationsRetrieveWithRequestBuilder() -> RequestBuilder<RecommendationResponse> {
        let localVariablePath = "/api/ai/recommendations/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RecommendationResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter customerSegmentationRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiAiSegmentationCreate(customerSegmentationRequest: CustomerSegmentationRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CustomerSegmentationResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return apiAiSegmentationCreateWithRequestBuilder(customerSegmentationRequest: customerSegmentationRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/ai/segmentation/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter customerSegmentationRequest: (body)  
     - returns: RequestBuilder<CustomerSegmentationResponse> 
     */
    open class func apiAiSegmentationCreateWithRequestBuilder(customerSegmentationRequest: CustomerSegmentationRequest) -> RequestBuilder<CustomerSegmentationResponse> {
        let localVariablePath = "/api/ai/segmentation/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: customerSegmentationRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CustomerSegmentationResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter sentimentRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiAiSentimentCreate(sentimentRequest: SentimentRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SentimentResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return apiAiSentimentCreateWithRequestBuilder(sentimentRequest: sentimentRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/ai/sentiment/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter sentimentRequest: (body)  
     - returns: RequestBuilder<SentimentResponse> 
     */
    open class func apiAiSentimentCreateWithRequestBuilder(sentimentRequest: SentimentRequest) -> RequestBuilder<SentimentResponse> {
        let localVariablePath = "/api/ai/sentiment/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sentimentRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SentimentResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter format
     */
    public enum Format_apiSchemaRetrieve: String, CaseIterable {
        case json = "json"
        case yaml = "yaml"
    }

    /**
     * enum for parameter lang
     */
    public enum Lang_apiSchemaRetrieve: String, CaseIterable {
        case af = "af"
        case ar = "ar"
        case arDz = "ar-dz"
        case ast = "ast"
        case az = "az"
        case be = "be"
        case bg = "bg"
        case bn = "bn"
        case br = "br"
        case bs = "bs"
        case ca = "ca"
        case ckb = "ckb"
        case cs = "cs"
        case cy = "cy"
        case da = "da"
        case de = "de"
        case dsb = "dsb"
        case el = "el"
        case en = "en"
        case enAu = "en-au"
        case enGb = "en-gb"
        case eo = "eo"
        case es = "es"
        case esAr = "es-ar"
        case esCo = "es-co"
        case esMx = "es-mx"
        case esNi = "es-ni"
        case esVe = "es-ve"
        case et = "et"
        case eu = "eu"
        case fa = "fa"
        case fi = "fi"
        case fr = "fr"
        case fy = "fy"
        case ga = "ga"
        case gd = "gd"
        case gl = "gl"
        case he = "he"
        case hi = "hi"
        case hr = "hr"
        case hsb = "hsb"
        case hu = "hu"
        case hy = "hy"
        case ia = "ia"
        case id = "id"
        case ig = "ig"
        case io = "io"
        case _is = "is"
        case it = "it"
        case ja = "ja"
        case ka = "ka"
        case kab = "kab"
        case kk = "kk"
        case km = "km"
        case kn = "kn"
        case ko = "ko"
        case ky = "ky"
        case lb = "lb"
        case lt = "lt"
        case lv = "lv"
        case mk = "mk"
        case ml = "ml"
        case mn = "mn"
        case mr = "mr"
        case ms = "ms"
        case my = "my"
        case nb = "nb"
        case ne = "ne"
        case nl = "nl"
        case nn = "nn"
        case os = "os"
        case pa = "pa"
        case pl = "pl"
        case pt = "pt"
        case ptBr = "pt-br"
        case ro = "ro"
        case ru = "ru"
        case sk = "sk"
        case sl = "sl"
        case sq = "sq"
        case sr = "sr"
        case srLatn = "sr-latn"
        case sv = "sv"
        case sw = "sw"
        case ta = "ta"
        case te = "te"
        case tg = "tg"
        case th = "th"
        case tk = "tk"
        case tr = "tr"
        case tt = "tt"
        case udm = "udm"
        case ug = "ug"
        case uk = "uk"
        case ur = "ur"
        case uz = "uz"
        case vi = "vi"
        case zhHans = "zh-hans"
        case zhHant = "zh-hant"
    }

    /**

     - parameter format: (query)  (optional)
     - parameter lang: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiSchemaRetrieve(format: Format_apiSchemaRetrieve? = nil, lang: Lang_apiSchemaRetrieve? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [String: AnyCodable]?, _ error: Error?) -> Void)) -> RequestTask {
        return apiSchemaRetrieveWithRequestBuilder(format: format, lang: lang).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/schema/
     - OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter format: (query)  (optional)
     - parameter lang: (query)  (optional)
     - returns: RequestBuilder<[String: AnyCodable]> 
     */
    open class func apiSchemaRetrieveWithRequestBuilder(format: Format_apiSchemaRetrieve? = nil, lang: Lang_apiSchemaRetrieve? = nil) -> RequestBuilder<[String: AnyCodable]> {
        let localVariablePath = "/api/schema/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
            "lang": (wrappedValue: lang?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[String: AnyCodable]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
