//
// ShopsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ShopsAPI {

    /**

     - parameter shopGalleryImagesModel: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsGalleryCreate(shopGalleryImagesModel: ShopGalleryImagesModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ShopGalleryImagesModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsGalleryCreateWithRequestBuilder(shopGalleryImagesModel: shopGalleryImagesModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /shops/gallery/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter shopGalleryImagesModel: (body)  
     - returns: RequestBuilder<ShopGalleryImagesModel> 
     */
    open class func shopsGalleryCreateWithRequestBuilder(shopGalleryImagesModel: ShopGalleryImagesModel) -> RequestBuilder<ShopGalleryImagesModel> {
        let localVariablePath = "/shops/gallery/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: shopGalleryImagesModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ShopGalleryImagesModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Shop Gallery Image. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsGalleryDestroy(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsGalleryDestroyWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /shops/gallery/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Shop Gallery Image. 
     - returns: RequestBuilder<Void> 
     */
    open class func shopsGalleryDestroyWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/shops/gallery/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsGalleryList(page: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedShopGalleryImagesModelList?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsGalleryListWithRequestBuilder(page: page).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /shops/gallery/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter page: (query) A page number within the paginated result set. (optional)
     - returns: RequestBuilder<PaginatedShopGalleryImagesModelList> 
     */
    open class func shopsGalleryListWithRequestBuilder(page: Int? = nil) -> RequestBuilder<PaginatedShopGalleryImagesModelList> {
        let localVariablePath = "/shops/gallery/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedShopGalleryImagesModelList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Shop Gallery Image. 
     - parameter patchedShopGalleryImagesModel: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsGalleryPartialUpdate(id: Int, patchedShopGalleryImagesModel: PatchedShopGalleryImagesModel? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ShopGalleryImagesModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsGalleryPartialUpdateWithRequestBuilder(id: id, patchedShopGalleryImagesModel: patchedShopGalleryImagesModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /shops/gallery/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Shop Gallery Image. 
     - parameter patchedShopGalleryImagesModel: (body)  (optional)
     - returns: RequestBuilder<ShopGalleryImagesModel> 
     */
    open class func shopsGalleryPartialUpdateWithRequestBuilder(id: Int, patchedShopGalleryImagesModel: PatchedShopGalleryImagesModel? = nil) -> RequestBuilder<ShopGalleryImagesModel> {
        var localVariablePath = "/shops/gallery/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedShopGalleryImagesModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ShopGalleryImagesModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Shop Gallery Image. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsGalleryRetrieve(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ShopGalleryImagesModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsGalleryRetrieveWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /shops/gallery/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Shop Gallery Image. 
     - returns: RequestBuilder<ShopGalleryImagesModel> 
     */
    open class func shopsGalleryRetrieveWithRequestBuilder(id: Int) -> RequestBuilder<ShopGalleryImagesModel> {
        var localVariablePath = "/shops/gallery/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ShopGalleryImagesModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Shop Gallery Image. 
     - parameter shopGalleryImagesModel: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsGalleryUpdate(id: Int, shopGalleryImagesModel: ShopGalleryImagesModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ShopGalleryImagesModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsGalleryUpdateWithRequestBuilder(id: id, shopGalleryImagesModel: shopGalleryImagesModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /shops/gallery/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Shop Gallery Image. 
     - parameter shopGalleryImagesModel: (body)  
     - returns: RequestBuilder<ShopGalleryImagesModel> 
     */
    open class func shopsGalleryUpdateWithRequestBuilder(id: Int, shopGalleryImagesModel: ShopGalleryImagesModel) -> RequestBuilder<ShopGalleryImagesModel> {
        var localVariablePath = "/shops/gallery/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: shopGalleryImagesModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ShopGalleryImagesModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsServiceCategoriesChoicesRetrieve(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ShopServiceCategoryModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsServiceCategoriesChoicesRetrieveWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /shops/service/categories/choices/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - returns: RequestBuilder<ShopServiceCategoryModel> 
     */
    open class func shopsServiceCategoriesChoicesRetrieveWithRequestBuilder() -> RequestBuilder<ShopServiceCategoryModel> {
        let localVariablePath = "/shops/service/categories/choices/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ShopServiceCategoryModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter shopServiceCategoryModel: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsServiceCategoriesCreate(shopServiceCategoryModel: ShopServiceCategoryModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ShopServiceCategoryModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsServiceCategoriesCreateWithRequestBuilder(shopServiceCategoryModel: shopServiceCategoryModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /shops/service/categories/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter shopServiceCategoryModel: (body)  
     - returns: RequestBuilder<ShopServiceCategoryModel> 
     */
    open class func shopsServiceCategoriesCreateWithRequestBuilder(shopServiceCategoryModel: ShopServiceCategoryModel) -> RequestBuilder<ShopServiceCategoryModel> {
        let localVariablePath = "/shops/service/categories/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: shopServiceCategoryModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ShopServiceCategoryModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Shop Service Category. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsServiceCategoriesDestroy(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsServiceCategoriesDestroyWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /shops/service/categories/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Shop Service Category. 
     - returns: RequestBuilder<Void> 
     */
    open class func shopsServiceCategoriesDestroyWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/shops/service/categories/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter createdAt: (query)  (optional)
     - parameter forecastData: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter query: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsServiceCategoriesList(createdAt: Date? = nil, forecastData: String? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, query: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedShopServiceCategoryModelList?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsServiceCategoriesListWithRequestBuilder(createdAt: createdAt, forecastData: forecastData, name: name, ordering: ordering, page: page, pageSize: pageSize, query: query).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /shops/service/categories/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter createdAt: (query)  (optional)
     - parameter forecastData: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter query: (query)  (optional)
     - returns: RequestBuilder<PaginatedShopServiceCategoryModelList> 
     */
    open class func shopsServiceCategoriesListWithRequestBuilder(createdAt: Date? = nil, forecastData: String? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, query: String? = nil) -> RequestBuilder<PaginatedShopServiceCategoryModelList> {
        let localVariablePath = "/shops/service/categories/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "created_at": (wrappedValue: createdAt?.encodeToJSON(), isExplode: true),
            "forecast_data": (wrappedValue: forecastData?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "query": (wrappedValue: query?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedShopServiceCategoryModelList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Shop Service Category. 
     - parameter patchedShopServiceCategoryModel: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsServiceCategoriesPartialUpdate(id: Int, patchedShopServiceCategoryModel: PatchedShopServiceCategoryModel? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ShopServiceCategoryModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsServiceCategoriesPartialUpdateWithRequestBuilder(id: id, patchedShopServiceCategoryModel: patchedShopServiceCategoryModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /shops/service/categories/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Shop Service Category. 
     - parameter patchedShopServiceCategoryModel: (body)  (optional)
     - returns: RequestBuilder<ShopServiceCategoryModel> 
     */
    open class func shopsServiceCategoriesPartialUpdateWithRequestBuilder(id: Int, patchedShopServiceCategoryModel: PatchedShopServiceCategoryModel? = nil) -> RequestBuilder<ShopServiceCategoryModel> {
        var localVariablePath = "/shops/service/categories/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedShopServiceCategoryModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ShopServiceCategoryModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Shop Service Category. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsServiceCategoriesRetrieve(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ShopServiceCategoryModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsServiceCategoriesRetrieveWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /shops/service/categories/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Shop Service Category. 
     - returns: RequestBuilder<ShopServiceCategoryModel> 
     */
    open class func shopsServiceCategoriesRetrieveWithRequestBuilder(id: Int) -> RequestBuilder<ShopServiceCategoryModel> {
        var localVariablePath = "/shops/service/categories/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ShopServiceCategoryModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Shop Service Category. 
     - parameter shopServiceCategoryModel: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsServiceCategoriesUpdate(id: Int, shopServiceCategoryModel: ShopServiceCategoryModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ShopServiceCategoryModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsServiceCategoriesUpdateWithRequestBuilder(id: id, shopServiceCategoryModel: shopServiceCategoryModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /shops/service/categories/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Shop Service Category. 
     - parameter shopServiceCategoryModel: (body)  
     - returns: RequestBuilder<ShopServiceCategoryModel> 
     */
    open class func shopsServiceCategoriesUpdateWithRequestBuilder(id: Int, shopServiceCategoryModel: ShopServiceCategoryModel) -> RequestBuilder<ShopServiceCategoryModel> {
        var localVariablePath = "/shops/service/categories/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: shopServiceCategoryModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ShopServiceCategoryModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsServiceCouponsChoicesRetrieve(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceBookingDiscountCouponsModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsServiceCouponsChoicesRetrieveWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /shops/service/coupons/choices/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - returns: RequestBuilder<ServiceBookingDiscountCouponsModel> 
     */
    open class func shopsServiceCouponsChoicesRetrieveWithRequestBuilder() -> RequestBuilder<ServiceBookingDiscountCouponsModel> {
        let localVariablePath = "/shops/service/coupons/choices/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceBookingDiscountCouponsModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter serviceBookingDiscountCouponsModel: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsServiceCouponsCreate(serviceBookingDiscountCouponsModel: ServiceBookingDiscountCouponsModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceBookingDiscountCouponsModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsServiceCouponsCreateWithRequestBuilder(serviceBookingDiscountCouponsModel: serviceBookingDiscountCouponsModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /shops/service/coupons/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter serviceBookingDiscountCouponsModel: (body)  
     - returns: RequestBuilder<ServiceBookingDiscountCouponsModel> 
     */
    open class func shopsServiceCouponsCreateWithRequestBuilder(serviceBookingDiscountCouponsModel: ServiceBookingDiscountCouponsModel) -> RequestBuilder<ServiceBookingDiscountCouponsModel> {
        let localVariablePath = "/shops/service/coupons/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: serviceBookingDiscountCouponsModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceBookingDiscountCouponsModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Service Booking Discount Coupon. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsServiceCouponsDestroy(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsServiceCouponsDestroyWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /shops/service/coupons/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Service Booking Discount Coupon. 
     - returns: RequestBuilder<Void> 
     */
    open class func shopsServiceCouponsDestroyWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/shops/service/coupons/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsServiceCouponsList(page: Int? = nil, pageSize: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedServiceBookingDiscountCouponsModelList?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsServiceCouponsListWithRequestBuilder(page: page, pageSize: pageSize).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /shops/service/coupons/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - returns: RequestBuilder<PaginatedServiceBookingDiscountCouponsModelList> 
     */
    open class func shopsServiceCouponsListWithRequestBuilder(page: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<PaginatedServiceBookingDiscountCouponsModelList> {
        let localVariablePath = "/shops/service/coupons/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedServiceBookingDiscountCouponsModelList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Service Booking Discount Coupon. 
     - parameter patchedServiceBookingDiscountCouponsModel: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsServiceCouponsPartialUpdate(id: Int, patchedServiceBookingDiscountCouponsModel: PatchedServiceBookingDiscountCouponsModel? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceBookingDiscountCouponsModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsServiceCouponsPartialUpdateWithRequestBuilder(id: id, patchedServiceBookingDiscountCouponsModel: patchedServiceBookingDiscountCouponsModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /shops/service/coupons/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Service Booking Discount Coupon. 
     - parameter patchedServiceBookingDiscountCouponsModel: (body)  (optional)
     - returns: RequestBuilder<ServiceBookingDiscountCouponsModel> 
     */
    open class func shopsServiceCouponsPartialUpdateWithRequestBuilder(id: Int, patchedServiceBookingDiscountCouponsModel: PatchedServiceBookingDiscountCouponsModel? = nil) -> RequestBuilder<ServiceBookingDiscountCouponsModel> {
        var localVariablePath = "/shops/service/coupons/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedServiceBookingDiscountCouponsModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceBookingDiscountCouponsModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Service Booking Discount Coupon. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsServiceCouponsRetrieve(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceBookingDiscountCouponsModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsServiceCouponsRetrieveWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /shops/service/coupons/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Service Booking Discount Coupon. 
     - returns: RequestBuilder<ServiceBookingDiscountCouponsModel> 
     */
    open class func shopsServiceCouponsRetrieveWithRequestBuilder(id: Int) -> RequestBuilder<ServiceBookingDiscountCouponsModel> {
        var localVariablePath = "/shops/service/coupons/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceBookingDiscountCouponsModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Service Booking Discount Coupon. 
     - parameter serviceBookingDiscountCouponsModel: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsServiceCouponsUpdate(id: Int, serviceBookingDiscountCouponsModel: ServiceBookingDiscountCouponsModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceBookingDiscountCouponsModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsServiceCouponsUpdateWithRequestBuilder(id: id, serviceBookingDiscountCouponsModel: serviceBookingDiscountCouponsModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /shops/service/coupons/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Service Booking Discount Coupon. 
     - parameter serviceBookingDiscountCouponsModel: (body)  
     - returns: RequestBuilder<ServiceBookingDiscountCouponsModel> 
     */
    open class func shopsServiceCouponsUpdateWithRequestBuilder(id: Int, serviceBookingDiscountCouponsModel: ServiceBookingDiscountCouponsModel) -> RequestBuilder<ServiceBookingDiscountCouponsModel> {
        var localVariablePath = "/shops/service/coupons/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: serviceBookingDiscountCouponsModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceBookingDiscountCouponsModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsServiceGalleryChoicesRetrieve(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ShopServiceGalleryModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsServiceGalleryChoicesRetrieveWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /shops/service/gallery/choices/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - returns: RequestBuilder<ShopServiceGalleryModel> 
     */
    open class func shopsServiceGalleryChoicesRetrieveWithRequestBuilder() -> RequestBuilder<ShopServiceGalleryModel> {
        let localVariablePath = "/shops/service/gallery/choices/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ShopServiceGalleryModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter shopServiceGalleryModel: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsServiceGalleryCreate(shopServiceGalleryModel: ShopServiceGalleryModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ShopServiceGalleryModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsServiceGalleryCreateWithRequestBuilder(shopServiceGalleryModel: shopServiceGalleryModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /shops/service/gallery/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter shopServiceGalleryModel: (body)  
     - returns: RequestBuilder<ShopServiceGalleryModel> 
     */
    open class func shopsServiceGalleryCreateWithRequestBuilder(shopServiceGalleryModel: ShopServiceGalleryModel) -> RequestBuilder<ShopServiceGalleryModel> {
        let localVariablePath = "/shops/service/gallery/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: shopServiceGalleryModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ShopServiceGalleryModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Shop Service Gallery Item. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsServiceGalleryDestroy(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsServiceGalleryDestroyWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /shops/service/gallery/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Shop Service Gallery Item. 
     - returns: RequestBuilder<Void> 
     */
    open class func shopsServiceGalleryDestroyWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/shops/service/gallery/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter service: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsServiceGalleryList(ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, service: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedShopServiceGalleryModelList?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsServiceGalleryListWithRequestBuilder(ordering: ordering, page: page, pageSize: pageSize, service: service).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /shops/service/gallery/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter service: (query)  (optional)
     - returns: RequestBuilder<PaginatedShopServiceGalleryModelList> 
     */
    open class func shopsServiceGalleryListWithRequestBuilder(ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, service: Int? = nil) -> RequestBuilder<PaginatedShopServiceGalleryModelList> {
        let localVariablePath = "/shops/service/gallery/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "service": (wrappedValue: service?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedShopServiceGalleryModelList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Shop Service Gallery Item. 
     - parameter patchedShopServiceGalleryModel: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsServiceGalleryPartialUpdate(id: Int, patchedShopServiceGalleryModel: PatchedShopServiceGalleryModel? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ShopServiceGalleryModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsServiceGalleryPartialUpdateWithRequestBuilder(id: id, patchedShopServiceGalleryModel: patchedShopServiceGalleryModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /shops/service/gallery/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Shop Service Gallery Item. 
     - parameter patchedShopServiceGalleryModel: (body)  (optional)
     - returns: RequestBuilder<ShopServiceGalleryModel> 
     */
    open class func shopsServiceGalleryPartialUpdateWithRequestBuilder(id: Int, patchedShopServiceGalleryModel: PatchedShopServiceGalleryModel? = nil) -> RequestBuilder<ShopServiceGalleryModel> {
        var localVariablePath = "/shops/service/gallery/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedShopServiceGalleryModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ShopServiceGalleryModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Shop Service Gallery Item. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsServiceGalleryRetrieve(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ShopServiceGalleryModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsServiceGalleryRetrieveWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /shops/service/gallery/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Shop Service Gallery Item. 
     - returns: RequestBuilder<ShopServiceGalleryModel> 
     */
    open class func shopsServiceGalleryRetrieveWithRequestBuilder(id: Int) -> RequestBuilder<ShopServiceGalleryModel> {
        var localVariablePath = "/shops/service/gallery/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ShopServiceGalleryModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Shop Service Gallery Item. 
     - parameter shopServiceGalleryModel: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsServiceGalleryUpdate(id: Int, shopServiceGalleryModel: ShopServiceGalleryModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ShopServiceGalleryModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsServiceGalleryUpdateWithRequestBuilder(id: id, shopServiceGalleryModel: shopServiceGalleryModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /shops/service/gallery/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Shop Service Gallery Item. 
     - parameter shopServiceGalleryModel: (body)  
     - returns: RequestBuilder<ShopServiceGalleryModel> 
     */
    open class func shopsServiceGalleryUpdateWithRequestBuilder(id: Int, shopServiceGalleryModel: ShopServiceGalleryModel) -> RequestBuilder<ShopServiceGalleryModel> {
        var localVariablePath = "/shops/service/gallery/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: shopServiceGalleryModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ShopServiceGalleryModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsServiceServiceExtendedDetailsChoicesRetrieve(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceExtendedDetailsModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsServiceServiceExtendedDetailsChoicesRetrieveWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /shops/service/service-extended-details/choices/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - returns: RequestBuilder<ServiceExtendedDetailsModel> 
     */
    open class func shopsServiceServiceExtendedDetailsChoicesRetrieveWithRequestBuilder() -> RequestBuilder<ServiceExtendedDetailsModel> {
        let localVariablePath = "/shops/service/service-extended-details/choices/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceExtendedDetailsModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter serviceExtendedDetailsModel: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsServiceServiceExtendedDetailsCreate(serviceExtendedDetailsModel: ServiceExtendedDetailsModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceExtendedDetailsModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsServiceServiceExtendedDetailsCreateWithRequestBuilder(serviceExtendedDetailsModel: serviceExtendedDetailsModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /shops/service/service-extended-details/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter serviceExtendedDetailsModel: (body)  
     - returns: RequestBuilder<ServiceExtendedDetailsModel> 
     */
    open class func shopsServiceServiceExtendedDetailsCreateWithRequestBuilder(serviceExtendedDetailsModel: ServiceExtendedDetailsModel) -> RequestBuilder<ServiceExtendedDetailsModel> {
        let localVariablePath = "/shops/service/service-extended-details/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: serviceExtendedDetailsModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceExtendedDetailsModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Service Extended Detail. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsServiceServiceExtendedDetailsDestroy(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsServiceServiceExtendedDetailsDestroyWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /shops/service/service-extended-details/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Service Extended Detail. 
     - returns: RequestBuilder<Void> 
     */
    open class func shopsServiceServiceExtendedDetailsDestroyWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/shops/service/service-extended-details/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsServiceServiceExtendedDetailsList(page: Int? = nil, pageSize: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedServiceExtendedDetailsModelList?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsServiceServiceExtendedDetailsListWithRequestBuilder(page: page, pageSize: pageSize).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /shops/service/service-extended-details/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - returns: RequestBuilder<PaginatedServiceExtendedDetailsModelList> 
     */
    open class func shopsServiceServiceExtendedDetailsListWithRequestBuilder(page: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<PaginatedServiceExtendedDetailsModelList> {
        let localVariablePath = "/shops/service/service-extended-details/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedServiceExtendedDetailsModelList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Service Extended Detail. 
     - parameter patchedServiceExtendedDetailsModel: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsServiceServiceExtendedDetailsPartialUpdate(id: Int, patchedServiceExtendedDetailsModel: PatchedServiceExtendedDetailsModel? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceExtendedDetailsModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsServiceServiceExtendedDetailsPartialUpdateWithRequestBuilder(id: id, patchedServiceExtendedDetailsModel: patchedServiceExtendedDetailsModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /shops/service/service-extended-details/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Service Extended Detail. 
     - parameter patchedServiceExtendedDetailsModel: (body)  (optional)
     - returns: RequestBuilder<ServiceExtendedDetailsModel> 
     */
    open class func shopsServiceServiceExtendedDetailsPartialUpdateWithRequestBuilder(id: Int, patchedServiceExtendedDetailsModel: PatchedServiceExtendedDetailsModel? = nil) -> RequestBuilder<ServiceExtendedDetailsModel> {
        var localVariablePath = "/shops/service/service-extended-details/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedServiceExtendedDetailsModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceExtendedDetailsModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Service Extended Detail. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsServiceServiceExtendedDetailsRetrieve(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceExtendedDetailsModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsServiceServiceExtendedDetailsRetrieveWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /shops/service/service-extended-details/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Service Extended Detail. 
     - returns: RequestBuilder<ServiceExtendedDetailsModel> 
     */
    open class func shopsServiceServiceExtendedDetailsRetrieveWithRequestBuilder(id: Int) -> RequestBuilder<ServiceExtendedDetailsModel> {
        var localVariablePath = "/shops/service/service-extended-details/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceExtendedDetailsModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Service Extended Detail. 
     - parameter serviceExtendedDetailsModel: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsServiceServiceExtendedDetailsUpdate(id: Int, serviceExtendedDetailsModel: ServiceExtendedDetailsModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceExtendedDetailsModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsServiceServiceExtendedDetailsUpdateWithRequestBuilder(id: id, serviceExtendedDetailsModel: serviceExtendedDetailsModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /shops/service/service-extended-details/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Service Extended Detail. 
     - parameter serviceExtendedDetailsModel: (body)  
     - returns: RequestBuilder<ServiceExtendedDetailsModel> 
     */
    open class func shopsServiceServiceExtendedDetailsUpdateWithRequestBuilder(id: Int, serviceExtendedDetailsModel: ServiceExtendedDetailsModel) -> RequestBuilder<ServiceExtendedDetailsModel> {
        var localVariablePath = "/shops/service/service-extended-details/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: serviceExtendedDetailsModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceExtendedDetailsModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsServiceServicesBookingsChoicesRetrieve(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceBookingDetailsModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsServiceServicesBookingsChoicesRetrieveWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /shops/service/services-bookings/choices/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - returns: RequestBuilder<ServiceBookingDetailsModel> 
     */
    open class func shopsServiceServicesBookingsChoicesRetrieveWithRequestBuilder() -> RequestBuilder<ServiceBookingDetailsModel> {
        let localVariablePath = "/shops/service/services-bookings/choices/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceBookingDetailsModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter serviceBookingDetailsModel: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsServiceServicesBookingsCreate(serviceBookingDetailsModel: ServiceBookingDetailsModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceBookingDetailsModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsServiceServicesBookingsCreateWithRequestBuilder(serviceBookingDetailsModel: serviceBookingDetailsModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /shops/service/services-bookings/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter serviceBookingDetailsModel: (body)  
     - returns: RequestBuilder<ServiceBookingDetailsModel> 
     */
    open class func shopsServiceServicesBookingsCreateWithRequestBuilder(serviceBookingDetailsModel: ServiceBookingDetailsModel) -> RequestBuilder<ServiceBookingDetailsModel> {
        let localVariablePath = "/shops/service/services-bookings/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: serviceBookingDetailsModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceBookingDetailsModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Service Booking Detail. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsServiceServicesBookingsDestroy(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsServiceServicesBookingsDestroyWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /shops/service/services-bookings/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Service Booking Detail. 
     - returns: RequestBuilder<Void> 
     */
    open class func shopsServiceServicesBookingsDestroyWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/shops/service/services-bookings/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter paymentStatus
     */
    public enum PaymentStatus_shopsServiceServicesBookingsList: String, CaseIterable {
        case paid = "paid"
        case pending = "pending"
        case unpaid = "unpaid"
    }

    /**
     * enum for parameter status
     */
    public enum Status_shopsServiceServicesBookingsList: String, CaseIterable {
        case booked = "booked"
        case cancelled = "cancelled"
        case completed = "completed"
        case requested = "requested"
    }

    /**

     - parameter bookingDateAfter: (query)  (optional)
     - parameter bookingDateBefore: (query)  (optional)
     - parameter bookingTime: (query)  (optional)
     - parameter customer: (query)  (optional)
     - parameter finalAmount: (query)  (optional)
     - parameter fraudFlag: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter paymentStatus: (query) * &#x60;unpaid&#x60; - Unpaid * &#x60;pending&#x60; - Pending * &#x60;paid&#x60; - Paid (optional)
     - parameter price: (query)  (optional)
     - parameter query: (query)  (optional)
     - parameter service: (query)  (optional)
     - parameter status: (query) * &#x60;requested&#x60; - Requested * &#x60;booked&#x60; - Booked * &#x60;completed&#x60; - Completed * &#x60;cancelled&#x60; - Cancelled (optional)
     - parameter user: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsServiceServicesBookingsList(bookingDateAfter: Date? = nil, bookingDateBefore: Date? = nil, bookingTime: String? = nil, customer: Int? = nil, finalAmount: Double? = nil, fraudFlag: Bool? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, paymentStatus: PaymentStatus_shopsServiceServicesBookingsList? = nil, price: Double? = nil, query: String? = nil, service: Int? = nil, status: Status_shopsServiceServicesBookingsList? = nil, user: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedServiceBookingDetailsModelList?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsServiceServicesBookingsListWithRequestBuilder(bookingDateAfter: bookingDateAfter, bookingDateBefore: bookingDateBefore, bookingTime: bookingTime, customer: customer, finalAmount: finalAmount, fraudFlag: fraudFlag, ordering: ordering, page: page, pageSize: pageSize, paymentStatus: paymentStatus, price: price, query: query, service: service, status: status, user: user).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /shops/service/services-bookings/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter bookingDateAfter: (query)  (optional)
     - parameter bookingDateBefore: (query)  (optional)
     - parameter bookingTime: (query)  (optional)
     - parameter customer: (query)  (optional)
     - parameter finalAmount: (query)  (optional)
     - parameter fraudFlag: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter paymentStatus: (query) * &#x60;unpaid&#x60; - Unpaid * &#x60;pending&#x60; - Pending * &#x60;paid&#x60; - Paid (optional)
     - parameter price: (query)  (optional)
     - parameter query: (query)  (optional)
     - parameter service: (query)  (optional)
     - parameter status: (query) * &#x60;requested&#x60; - Requested * &#x60;booked&#x60; - Booked * &#x60;completed&#x60; - Completed * &#x60;cancelled&#x60; - Cancelled (optional)
     - parameter user: (query)  (optional)
     - returns: RequestBuilder<PaginatedServiceBookingDetailsModelList> 
     */
    open class func shopsServiceServicesBookingsListWithRequestBuilder(bookingDateAfter: Date? = nil, bookingDateBefore: Date? = nil, bookingTime: String? = nil, customer: Int? = nil, finalAmount: Double? = nil, fraudFlag: Bool? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, paymentStatus: PaymentStatus_shopsServiceServicesBookingsList? = nil, price: Double? = nil, query: String? = nil, service: Int? = nil, status: Status_shopsServiceServicesBookingsList? = nil, user: Int? = nil) -> RequestBuilder<PaginatedServiceBookingDetailsModelList> {
        let localVariablePath = "/shops/service/services-bookings/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "booking_date_after": (wrappedValue: bookingDateAfter?.encodeToJSON(), isExplode: true),
            "booking_date_before": (wrappedValue: bookingDateBefore?.encodeToJSON(), isExplode: true),
            "booking_time": (wrappedValue: bookingTime?.encodeToJSON(), isExplode: true),
            "customer": (wrappedValue: customer?.encodeToJSON(), isExplode: true),
            "final_amount": (wrappedValue: finalAmount?.encodeToJSON(), isExplode: true),
            "fraud_flag": (wrappedValue: fraudFlag?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "payment_status": (wrappedValue: paymentStatus?.encodeToJSON(), isExplode: true),
            "price": (wrappedValue: price?.encodeToJSON(), isExplode: true),
            "query": (wrappedValue: query?.encodeToJSON(), isExplode: true),
            "service": (wrappedValue: service?.encodeToJSON(), isExplode: true),
            "status": (wrappedValue: status?.encodeToJSON(), isExplode: true),
            "user": (wrappedValue: user?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedServiceBookingDetailsModelList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Service Booking Detail. 
     - parameter patchedServiceBookingDetailsModel: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsServiceServicesBookingsPartialUpdate(id: Int, patchedServiceBookingDetailsModel: PatchedServiceBookingDetailsModel? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceBookingDetailsModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsServiceServicesBookingsPartialUpdateWithRequestBuilder(id: id, patchedServiceBookingDetailsModel: patchedServiceBookingDetailsModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /shops/service/services-bookings/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Service Booking Detail. 
     - parameter patchedServiceBookingDetailsModel: (body)  (optional)
     - returns: RequestBuilder<ServiceBookingDetailsModel> 
     */
    open class func shopsServiceServicesBookingsPartialUpdateWithRequestBuilder(id: Int, patchedServiceBookingDetailsModel: PatchedServiceBookingDetailsModel? = nil) -> RequestBuilder<ServiceBookingDetailsModel> {
        var localVariablePath = "/shops/service/services-bookings/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedServiceBookingDetailsModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceBookingDetailsModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Service Booking Detail. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsServiceServicesBookingsRetrieve(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceBookingDetailsModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsServiceServicesBookingsRetrieveWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /shops/service/services-bookings/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Service Booking Detail. 
     - returns: RequestBuilder<ServiceBookingDetailsModel> 
     */
    open class func shopsServiceServicesBookingsRetrieveWithRequestBuilder(id: Int) -> RequestBuilder<ServiceBookingDetailsModel> {
        var localVariablePath = "/shops/service/services-bookings/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceBookingDetailsModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Service Booking Detail. 
     - parameter serviceBookingDetailsModel: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsServiceServicesBookingsUpdate(id: Int, serviceBookingDetailsModel: ServiceBookingDetailsModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceBookingDetailsModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsServiceServicesBookingsUpdateWithRequestBuilder(id: id, serviceBookingDetailsModel: serviceBookingDetailsModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /shops/service/services-bookings/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Service Booking Detail. 
     - parameter serviceBookingDetailsModel: (body)  
     - returns: RequestBuilder<ServiceBookingDetailsModel> 
     */
    open class func shopsServiceServicesBookingsUpdateWithRequestBuilder(id: Int, serviceBookingDetailsModel: ServiceBookingDetailsModel) -> RequestBuilder<ServiceBookingDetailsModel> {
        var localVariablePath = "/shops/service/services-bookings/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: serviceBookingDetailsModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceBookingDetailsModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsServiceServicesChoicesRetrieve(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ShopServiceDetailsModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsServiceServicesChoicesRetrieveWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /shops/service/services/choices/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - returns: RequestBuilder<ShopServiceDetailsModel> 
     */
    open class func shopsServiceServicesChoicesRetrieveWithRequestBuilder() -> RequestBuilder<ShopServiceDetailsModel> {
        let localVariablePath = "/shops/service/services/choices/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ShopServiceDetailsModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter shopServiceDetailsModel: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsServiceServicesCreate(shopServiceDetailsModel: ShopServiceDetailsModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ShopServiceDetailsModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsServiceServicesCreateWithRequestBuilder(shopServiceDetailsModel: shopServiceDetailsModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /shops/service/services/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter shopServiceDetailsModel: (body)  
     - returns: RequestBuilder<ShopServiceDetailsModel> 
     */
    open class func shopsServiceServicesCreateWithRequestBuilder(shopServiceDetailsModel: ShopServiceDetailsModel) -> RequestBuilder<ShopServiceDetailsModel> {
        let localVariablePath = "/shops/service/services/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: shopServiceDetailsModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ShopServiceDetailsModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Shop Service Detail. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsServiceServicesDestroy(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsServiceServicesDestroyWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /shops/service/services/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Shop Service Detail. 
     - returns: RequestBuilder<Void> 
     */
    open class func shopsServiceServicesDestroyWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/shops/service/services/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter serviceType
     */
    public enum ServiceType_shopsServiceServicesList: String, CaseIterable {
        case atHome = "at_home"
        case both = "both"
        case inShop = "in_shop"
    }

    /**

     - parameter category: (query)  (optional)
     - parameter description: (query)  (optional)
     - parameter duration: (query)  (optional)
     - parameter isAvailable: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter nameArabic: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter price: (query)  (optional)
     - parameter query: (query)  (optional)
     - parameter serviceType: (query) * &#x60;in_shop&#x60; - In Shop * &#x60;at_home&#x60; - At Home * &#x60;both&#x60; - Both (optional)
     - parameter shop: (query)  (optional)
     - parameter specialists: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsServiceServicesList(category: Int? = nil, description: String? = nil, duration: String? = nil, isAvailable: Bool? = nil, name: String? = nil, nameArabic: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, price: Double? = nil, query: String? = nil, serviceType: ServiceType_shopsServiceServicesList? = nil, shop: Int? = nil, specialists: [Int]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedShopServiceDetailsModelList?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsServiceServicesListWithRequestBuilder(category: category, description: description, duration: duration, isAvailable: isAvailable, name: name, nameArabic: nameArabic, ordering: ordering, page: page, pageSize: pageSize, price: price, query: query, serviceType: serviceType, shop: shop, specialists: specialists).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /shops/service/services/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter category: (query)  (optional)
     - parameter description: (query)  (optional)
     - parameter duration: (query)  (optional)
     - parameter isAvailable: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter nameArabic: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter price: (query)  (optional)
     - parameter query: (query)  (optional)
     - parameter serviceType: (query) * &#x60;in_shop&#x60; - In Shop * &#x60;at_home&#x60; - At Home * &#x60;both&#x60; - Both (optional)
     - parameter shop: (query)  (optional)
     - parameter specialists: (query)  (optional)
     - returns: RequestBuilder<PaginatedShopServiceDetailsModelList> 
     */
    open class func shopsServiceServicesListWithRequestBuilder(category: Int? = nil, description: String? = nil, duration: String? = nil, isAvailable: Bool? = nil, name: String? = nil, nameArabic: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, price: Double? = nil, query: String? = nil, serviceType: ServiceType_shopsServiceServicesList? = nil, shop: Int? = nil, specialists: [Int]? = nil) -> RequestBuilder<PaginatedShopServiceDetailsModelList> {
        let localVariablePath = "/shops/service/services/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "category": (wrappedValue: category?.encodeToJSON(), isExplode: true),
            "description": (wrappedValue: description?.encodeToJSON(), isExplode: true),
            "duration": (wrappedValue: duration?.encodeToJSON(), isExplode: true),
            "is_available": (wrappedValue: isAvailable?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "name_arabic": (wrappedValue: nameArabic?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "price": (wrappedValue: price?.encodeToJSON(), isExplode: true),
            "query": (wrappedValue: query?.encodeToJSON(), isExplode: true),
            "service_type": (wrappedValue: serviceType?.encodeToJSON(), isExplode: true),
            "shop": (wrappedValue: shop?.encodeToJSON(), isExplode: true),
            "specialists": (wrappedValue: specialists?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedShopServiceDetailsModelList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Shop Service Detail. 
     - parameter patchedShopServiceDetailsModel: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsServiceServicesPartialUpdate(id: Int, patchedShopServiceDetailsModel: PatchedShopServiceDetailsModel? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ShopServiceDetailsModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsServiceServicesPartialUpdateWithRequestBuilder(id: id, patchedShopServiceDetailsModel: patchedShopServiceDetailsModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /shops/service/services/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Shop Service Detail. 
     - parameter patchedShopServiceDetailsModel: (body)  (optional)
     - returns: RequestBuilder<ShopServiceDetailsModel> 
     */
    open class func shopsServiceServicesPartialUpdateWithRequestBuilder(id: Int, patchedShopServiceDetailsModel: PatchedShopServiceDetailsModel? = nil) -> RequestBuilder<ShopServiceDetailsModel> {
        var localVariablePath = "/shops/service/services/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedShopServiceDetailsModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ShopServiceDetailsModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Shop Service Detail. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsServiceServicesRetrieve(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ShopServiceDetailsModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsServiceServicesRetrieveWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /shops/service/services/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Shop Service Detail. 
     - returns: RequestBuilder<ShopServiceDetailsModel> 
     */
    open class func shopsServiceServicesRetrieveWithRequestBuilder(id: Int) -> RequestBuilder<ShopServiceDetailsModel> {
        var localVariablePath = "/shops/service/services/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ShopServiceDetailsModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Shop Service Detail. 
     - parameter shopServiceDetailsModel: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsServiceServicesUpdate(id: Int, shopServiceDetailsModel: ShopServiceDetailsModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ShopServiceDetailsModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsServiceServicesUpdateWithRequestBuilder(id: id, shopServiceDetailsModel: shopServiceDetailsModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /shops/service/services/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Shop Service Detail. 
     - parameter shopServiceDetailsModel: (body)  
     - returns: RequestBuilder<ShopServiceDetailsModel> 
     */
    open class func shopsServiceServicesUpdateWithRequestBuilder(id: Int, shopServiceDetailsModel: ShopServiceDetailsModel) -> RequestBuilder<ShopServiceDetailsModel> {
        var localVariablePath = "/shops/service/services/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: shopServiceDetailsModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ShopServiceDetailsModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter shopDetailsModel: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsShopsCreate(shopDetailsModel: ShopDetailsModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ShopDetailsModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsShopsCreateWithRequestBuilder(shopDetailsModel: shopDetailsModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /shops/shops/
     - Manage shops. We provide a top‑level queryset and lookup_value_regex so Spectacular infers <pk> is int.
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter shopDetailsModel: (body)  
     - returns: RequestBuilder<ShopDetailsModel> 
     */
    open class func shopsShopsCreateWithRequestBuilder(shopDetailsModel: ShopDetailsModel) -> RequestBuilder<ShopDetailsModel> {
        let localVariablePath = "/shops/shops/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: shopDetailsModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ShopDetailsModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsShopsDestroy(id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsShopsDestroyWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /shops/shops/{id}/
     - Manage shops. We provide a top‑level queryset and lookup_value_regex so Spectacular infers <pk> is int.
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func shopsShopsDestroyWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var localVariablePath = "/shops/shops/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsShopsList(ordering: String? = nil, page: Int? = nil, search: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedShopDetailsModelList?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsShopsListWithRequestBuilder(ordering: ordering, page: page, search: search).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /shops/shops/
     - Manage shops. We provide a top‑level queryset and lookup_value_regex so Spectacular infers <pk> is int.
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter search: (query) A search term. (optional)
     - returns: RequestBuilder<PaginatedShopDetailsModelList> 
     */
    open class func shopsShopsListWithRequestBuilder(ordering: String? = nil, page: Int? = nil, search: String? = nil) -> RequestBuilder<PaginatedShopDetailsModelList> {
        let localVariablePath = "/shops/shops/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedShopDetailsModelList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path)  
     - parameter patchedShopDetailsModel: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsShopsPartialUpdate(id: String, patchedShopDetailsModel: PatchedShopDetailsModel? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ShopDetailsModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsShopsPartialUpdateWithRequestBuilder(id: id, patchedShopDetailsModel: patchedShopDetailsModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /shops/shops/{id}/
     - Manage shops. We provide a top‑level queryset and lookup_value_regex so Spectacular infers <pk> is int.
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path)  
     - parameter patchedShopDetailsModel: (body)  (optional)
     - returns: RequestBuilder<ShopDetailsModel> 
     */
    open class func shopsShopsPartialUpdateWithRequestBuilder(id: String, patchedShopDetailsModel: PatchedShopDetailsModel? = nil) -> RequestBuilder<ShopDetailsModel> {
        var localVariablePath = "/shops/shops/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedShopDetailsModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ShopDetailsModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsShopsRetrieve(id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ShopDetailsModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsShopsRetrieveWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /shops/shops/{id}/
     - Manage shops. We provide a top‑level queryset and lookup_value_regex so Spectacular infers <pk> is int.
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path)  
     - returns: RequestBuilder<ShopDetailsModel> 
     */
    open class func shopsShopsRetrieveWithRequestBuilder(id: String) -> RequestBuilder<ShopDetailsModel> {
        var localVariablePath = "/shops/shops/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ShopDetailsModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path)  
     - parameter shopDetailsModel: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsShopsUpdate(id: String, shopDetailsModel: ShopDetailsModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ShopDetailsModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsShopsUpdateWithRequestBuilder(id: id, shopDetailsModel: shopDetailsModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /shops/shops/{id}/
     - Manage shops. We provide a top‑level queryset and lookup_value_regex so Spectacular infers <pk> is int.
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path)  
     - parameter shopDetailsModel: (body)  
     - returns: RequestBuilder<ShopDetailsModel> 
     */
    open class func shopsShopsUpdateWithRequestBuilder(id: String, shopDetailsModel: ShopDetailsModel) -> RequestBuilder<ShopDetailsModel> {
        var localVariablePath = "/shops/shops/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: shopDetailsModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ShopDetailsModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter shopSpecialistDetailsModel: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsSpecialistsCreate(shopSpecialistDetailsModel: ShopSpecialistDetailsModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ShopSpecialistDetailsModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsSpecialistsCreateWithRequestBuilder(shopSpecialistDetailsModel: shopSpecialistDetailsModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /shops/specialists/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter shopSpecialistDetailsModel: (body)  
     - returns: RequestBuilder<ShopSpecialistDetailsModel> 
     */
    open class func shopsSpecialistsCreateWithRequestBuilder(shopSpecialistDetailsModel: ShopSpecialistDetailsModel) -> RequestBuilder<ShopSpecialistDetailsModel> {
        let localVariablePath = "/shops/specialists/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: shopSpecialistDetailsModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ShopSpecialistDetailsModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Shop Specialist Detail. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsSpecialistsDestroy(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsSpecialistsDestroyWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /shops/specialists/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Shop Specialist Detail. 
     - returns: RequestBuilder<Void> 
     */
    open class func shopsSpecialistsDestroyWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/shops/specialists/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsSpecialistsList(page: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedShopSpecialistDetailsModelList?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsSpecialistsListWithRequestBuilder(page: page).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /shops/specialists/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter page: (query) A page number within the paginated result set. (optional)
     - returns: RequestBuilder<PaginatedShopSpecialistDetailsModelList> 
     */
    open class func shopsSpecialistsListWithRequestBuilder(page: Int? = nil) -> RequestBuilder<PaginatedShopSpecialistDetailsModelList> {
        let localVariablePath = "/shops/specialists/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedShopSpecialistDetailsModelList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Shop Specialist Detail. 
     - parameter patchedShopSpecialistDetailsModel: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsSpecialistsPartialUpdate(id: Int, patchedShopSpecialistDetailsModel: PatchedShopSpecialistDetailsModel? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ShopSpecialistDetailsModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsSpecialistsPartialUpdateWithRequestBuilder(id: id, patchedShopSpecialistDetailsModel: patchedShopSpecialistDetailsModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /shops/specialists/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Shop Specialist Detail. 
     - parameter patchedShopSpecialistDetailsModel: (body)  (optional)
     - returns: RequestBuilder<ShopSpecialistDetailsModel> 
     */
    open class func shopsSpecialistsPartialUpdateWithRequestBuilder(id: Int, patchedShopSpecialistDetailsModel: PatchedShopSpecialistDetailsModel? = nil) -> RequestBuilder<ShopSpecialistDetailsModel> {
        var localVariablePath = "/shops/specialists/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedShopSpecialistDetailsModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ShopSpecialistDetailsModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Shop Specialist Detail. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsSpecialistsRetrieve(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ShopSpecialistDetailsModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsSpecialistsRetrieveWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /shops/specialists/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Shop Specialist Detail. 
     - returns: RequestBuilder<ShopSpecialistDetailsModel> 
     */
    open class func shopsSpecialistsRetrieveWithRequestBuilder(id: Int) -> RequestBuilder<ShopSpecialistDetailsModel> {
        var localVariablePath = "/shops/specialists/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ShopSpecialistDetailsModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter specialistTypes: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsSpecialistsTypesCreate(specialistTypes: SpecialistTypes, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SpecialistTypes?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsSpecialistsTypesCreateWithRequestBuilder(specialistTypes: specialistTypes).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /shops/specialists-types/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter specialistTypes: (body)  
     - returns: RequestBuilder<SpecialistTypes> 
     */
    open class func shopsSpecialistsTypesCreateWithRequestBuilder(specialistTypes: SpecialistTypes) -> RequestBuilder<SpecialistTypes> {
        let localVariablePath = "/shops/specialists-types/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: specialistTypes)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SpecialistTypes>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Specialist Type. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsSpecialistsTypesDestroy(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsSpecialistsTypesDestroyWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /shops/specialists-types/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Specialist Type. 
     - returns: RequestBuilder<Void> 
     */
    open class func shopsSpecialistsTypesDestroyWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/shops/specialists-types/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsSpecialistsTypesList(page: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedSpecialistTypesList?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsSpecialistsTypesListWithRequestBuilder(page: page).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /shops/specialists-types/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter page: (query) A page number within the paginated result set. (optional)
     - returns: RequestBuilder<PaginatedSpecialistTypesList> 
     */
    open class func shopsSpecialistsTypesListWithRequestBuilder(page: Int? = nil) -> RequestBuilder<PaginatedSpecialistTypesList> {
        let localVariablePath = "/shops/specialists-types/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedSpecialistTypesList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Specialist Type. 
     - parameter patchedSpecialistTypes: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsSpecialistsTypesPartialUpdate(id: Int, patchedSpecialistTypes: PatchedSpecialistTypes? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SpecialistTypes?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsSpecialistsTypesPartialUpdateWithRequestBuilder(id: id, patchedSpecialistTypes: patchedSpecialistTypes).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /shops/specialists-types/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Specialist Type. 
     - parameter patchedSpecialistTypes: (body)  (optional)
     - returns: RequestBuilder<SpecialistTypes> 
     */
    open class func shopsSpecialistsTypesPartialUpdateWithRequestBuilder(id: Int, patchedSpecialistTypes: PatchedSpecialistTypes? = nil) -> RequestBuilder<SpecialistTypes> {
        var localVariablePath = "/shops/specialists-types/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedSpecialistTypes)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SpecialistTypes>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Specialist Type. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsSpecialistsTypesRetrieve(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SpecialistTypes?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsSpecialistsTypesRetrieveWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /shops/specialists-types/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Specialist Type. 
     - returns: RequestBuilder<SpecialistTypes> 
     */
    open class func shopsSpecialistsTypesRetrieveWithRequestBuilder(id: Int) -> RequestBuilder<SpecialistTypes> {
        var localVariablePath = "/shops/specialists-types/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SpecialistTypes>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Specialist Type. 
     - parameter specialistTypes: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsSpecialistsTypesUpdate(id: Int, specialistTypes: SpecialistTypes, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SpecialistTypes?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsSpecialistsTypesUpdateWithRequestBuilder(id: id, specialistTypes: specialistTypes).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /shops/specialists-types/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Specialist Type. 
     - parameter specialistTypes: (body)  
     - returns: RequestBuilder<SpecialistTypes> 
     */
    open class func shopsSpecialistsTypesUpdateWithRequestBuilder(id: Int, specialistTypes: SpecialistTypes) -> RequestBuilder<SpecialistTypes> {
        var localVariablePath = "/shops/specialists-types/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: specialistTypes)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SpecialistTypes>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Shop Specialist Detail. 
     - parameter shopSpecialistDetailsModel: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopsSpecialistsUpdate(id: Int, shopSpecialistDetailsModel: ShopSpecialistDetailsModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ShopSpecialistDetailsModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopsSpecialistsUpdateWithRequestBuilder(id: id, shopSpecialistDetailsModel: shopSpecialistDetailsModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /shops/specialists/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Shop Specialist Detail. 
     - parameter shopSpecialistDetailsModel: (body)  
     - returns: RequestBuilder<ShopSpecialistDetailsModel> 
     */
    open class func shopsSpecialistsUpdateWithRequestBuilder(id: Int, shopSpecialistDetailsModel: ShopSpecialistDetailsModel) -> RequestBuilder<ShopSpecialistDetailsModel> {
        var localVariablePath = "/shops/specialists/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: shopSpecialistDetailsModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ShopSpecialistDetailsModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
