//
// AuthAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AuthAPI {

    /**

     - parameter tokenObtainPair: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authApiTokenCreate(tokenObtainPair: TokenObtainPair, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TokenObtainPair?, _ error: Error?) -> Void)) -> RequestTask {
        return authApiTokenCreateWithRequestBuilder(tokenObtainPair: tokenObtainPair).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /auth/api/token/
     - Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
     - parameter tokenObtainPair: (body)  
     - returns: RequestBuilder<TokenObtainPair> 
     */
    open class func authApiTokenCreateWithRequestBuilder(tokenObtainPair: TokenObtainPair) -> RequestBuilder<TokenObtainPair> {
        let localVariablePath = "/auth/api/token/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tokenObtainPair)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TokenObtainPair>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter tokenRefresh: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authApiTokenRefreshCreate(tokenRefresh: TokenRefresh, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TokenRefresh?, _ error: Error?) -> Void)) -> RequestTask {
        return authApiTokenRefreshCreateWithRequestBuilder(tokenRefresh: tokenRefresh).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /auth/api/token/refresh/
     - Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
     - parameter tokenRefresh: (body)  
     - returns: RequestBuilder<TokenRefresh> 
     */
    open class func authApiTokenRefreshCreateWithRequestBuilder(tokenRefresh: TokenRefresh) -> RequestBuilder<TokenRefresh> {
        let localVariablePath = "/auth/api/token/refresh/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tokenRefresh)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TokenRefresh>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authGetOtpRetrieve(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: RegistrationOTPResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return authGetOtpRetrieveWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /auth/get-otp/
     - GET /get-otp/?phone_number=...&otp_type=...
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - returns: RequestBuilder<RegistrationOTPResponse> 
     */
    open class func authGetOtpRetrieveWithRequestBuilder() -> RequestBuilder<RegistrationOTPResponse> {
        let localVariablePath = "/auth/get-otp/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RegistrationOTPResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter loginWithOTPRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authGetTokenWithOtpCreate(loginWithOTPRequest: LoginWithOTPRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: LoginWithOTPResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return authGetTokenWithOtpCreateWithRequestBuilder(loginWithOTPRequest: loginWithOTPRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /auth/get-token-with-otp/
     - POST /get-token-with-otp/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter loginWithOTPRequest: (body)  
     - returns: RequestBuilder<LoginWithOTPResponse> 
     */
    open class func authGetTokenWithOtpCreateWithRequestBuilder(loginWithOTPRequest: LoginWithOTPRequest) -> RequestBuilder<LoginWithOTPResponse> {
        let localVariablePath = "/auth/get-token-with-otp/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: loginWithOTPRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LoginWithOTPResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter registerUserRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authRegisterCreate(registerUserRequest: RegisterUserRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: RegisterUserResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return authRegisterCreateWithRequestBuilder(registerUserRequest: registerUserRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /auth/register/
     - POST /register/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter registerUserRequest: (body)  
     - returns: RequestBuilder<RegisterUserResponse> 
     */
    open class func authRegisterCreateWithRequestBuilder(registerUserRequest: RegisterUserRequest) -> RequestBuilder<RegisterUserResponse> {
        let localVariablePath = "/auth/register/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: registerUserRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RegisterUserResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authTestRetrieve(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TestResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return authTestRetrieveWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /auth/test/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - returns: RequestBuilder<TestResponse> 
     */
    open class func authTestRetrieveWithRequestBuilder() -> RequestBuilder<TestResponse> {
        let localVariablePath = "/auth/test/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TestResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter unifiedLoginRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authUnifiedLoginCreate(unifiedLoginRequest: UnifiedLoginRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UnifiedLoginResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return authUnifiedLoginCreateWithRequestBuilder(unifiedLoginRequest: unifiedLoginRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /auth/unified-login/
     - POST /unified-login/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter unifiedLoginRequest: (body)  
     - returns: RequestBuilder<UnifiedLoginResponse> 
     */
    open class func authUnifiedLoginCreateWithRequestBuilder(unifiedLoginRequest: UnifiedLoginRequest) -> RequestBuilder<UnifiedLoginResponse> {
        let localVariablePath = "/auth/unified-login/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: unifiedLoginRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UnifiedLoginResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
