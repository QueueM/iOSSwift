//
// StoriesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class StoriesAPI {

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func storiesStoriesActiveStoriesRetrieve(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Story?, _ error: Error?) -> Void)) -> RequestTask {
        return storiesStoriesActiveStoriesRetrieveWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stories/stories/active_stories/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - returns: RequestBuilder<Story> 
     */
    open class func storiesStoriesActiveStoriesRetrieveWithRequestBuilder() -> RequestBuilder<Story> {
        let localVariablePath = "/stories/stories/active_stories/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Story>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter story: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func storiesStoriesCreate(story: Story, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Story?, _ error: Error?) -> Void)) -> RequestTask {
        return storiesStoriesCreateWithRequestBuilder(story: story).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /stories/stories/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter story: (body)  
     - returns: RequestBuilder<Story> 
     */
    open class func storiesStoriesCreateWithRequestBuilder(story: Story) -> RequestBuilder<Story> {
        let localVariablePath = "/stories/stories/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: story)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Story>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this story model. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func storiesStoriesDestroy(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return storiesStoriesDestroyWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /stories/stories/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this story model. 
     - returns: RequestBuilder<Void> 
     */
    open class func storiesStoriesDestroyWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/stories/stories/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter aiVideoTags: (query)  (optional)
     - parameter analyticsData: (query)  (optional)
     - parameter caption: (query)  (optional)
     - parameter createdAt: (query)  (optional)
     - parameter expiresAt: (query)  (optional)
     - parameter image: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter shop: (query)  (optional)
     - parameter video: (query)  (optional)
     - parameter viewCount: (query)  (optional)
     - parameter viewedBy: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func storiesStoriesList(aiVideoTags: String? = nil, analyticsData: String? = nil, caption: String? = nil, createdAt: Date? = nil, expiresAt: Date? = nil, image: String? = nil, ordering: String? = nil, page: Int? = nil, shop: Int? = nil, video: String? = nil, viewCount: Int? = nil, viewedBy: [Int]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedStoryList?, _ error: Error?) -> Void)) -> RequestTask {
        return storiesStoriesListWithRequestBuilder(aiVideoTags: aiVideoTags, analyticsData: analyticsData, caption: caption, createdAt: createdAt, expiresAt: expiresAt, image: image, ordering: ordering, page: page, shop: shop, video: video, viewCount: viewCount, viewedBy: viewedBy).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stories/stories/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter aiVideoTags: (query)  (optional)
     - parameter analyticsData: (query)  (optional)
     - parameter caption: (query)  (optional)
     - parameter createdAt: (query)  (optional)
     - parameter expiresAt: (query)  (optional)
     - parameter image: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter shop: (query)  (optional)
     - parameter video: (query)  (optional)
     - parameter viewCount: (query)  (optional)
     - parameter viewedBy: (query)  (optional)
     - returns: RequestBuilder<PaginatedStoryList> 
     */
    open class func storiesStoriesListWithRequestBuilder(aiVideoTags: String? = nil, analyticsData: String? = nil, caption: String? = nil, createdAt: Date? = nil, expiresAt: Date? = nil, image: String? = nil, ordering: String? = nil, page: Int? = nil, shop: Int? = nil, video: String? = nil, viewCount: Int? = nil, viewedBy: [Int]? = nil) -> RequestBuilder<PaginatedStoryList> {
        let localVariablePath = "/stories/stories/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ai_video_tags": (wrappedValue: aiVideoTags?.encodeToJSON(), isExplode: true),
            "analytics_data": (wrappedValue: analyticsData?.encodeToJSON(), isExplode: true),
            "caption": (wrappedValue: caption?.encodeToJSON(), isExplode: true),
            "created_at": (wrappedValue: createdAt?.encodeToJSON(), isExplode: true),
            "expires_at": (wrappedValue: expiresAt?.encodeToJSON(), isExplode: true),
            "image": (wrappedValue: image?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "shop": (wrappedValue: shop?.encodeToJSON(), isExplode: true),
            "video": (wrappedValue: video?.encodeToJSON(), isExplode: true),
            "view_count": (wrappedValue: viewCount?.encodeToJSON(), isExplode: true),
            "viewed_by": (wrappedValue: viewedBy?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedStoryList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this story model. 
     - parameter story: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func storiesStoriesMarkViewedCreate(id: Int, story: Story, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Story?, _ error: Error?) -> Void)) -> RequestTask {
        return storiesStoriesMarkViewedCreateWithRequestBuilder(id: id, story: story).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /stories/stories/{id}/mark_viewed/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this story model. 
     - parameter story: (body)  
     - returns: RequestBuilder<Story> 
     */
    open class func storiesStoriesMarkViewedCreateWithRequestBuilder(id: Int, story: Story) -> RequestBuilder<Story> {
        var localVariablePath = "/stories/stories/{id}/mark_viewed/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: story)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Story>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this story model. 
     - parameter patchedStory: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func storiesStoriesPartialUpdate(id: Int, patchedStory: PatchedStory? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Story?, _ error: Error?) -> Void)) -> RequestTask {
        return storiesStoriesPartialUpdateWithRequestBuilder(id: id, patchedStory: patchedStory).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /stories/stories/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this story model. 
     - parameter patchedStory: (body)  (optional)
     - returns: RequestBuilder<Story> 
     */
    open class func storiesStoriesPartialUpdateWithRequestBuilder(id: Int, patchedStory: PatchedStory? = nil) -> RequestBuilder<Story> {
        var localVariablePath = "/stories/stories/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedStory)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Story>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this story model. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func storiesStoriesRetrieve(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Story?, _ error: Error?) -> Void)) -> RequestTask {
        return storiesStoriesRetrieveWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stories/stories/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this story model. 
     - returns: RequestBuilder<Story> 
     */
    open class func storiesStoriesRetrieveWithRequestBuilder(id: Int) -> RequestBuilder<Story> {
        var localVariablePath = "/stories/stories/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Story>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this story model. 
     - parameter story: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func storiesStoriesUpdate(id: Int, story: Story, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Story?, _ error: Error?) -> Void)) -> RequestTask {
        return storiesStoriesUpdateWithRequestBuilder(id: id, story: story).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /stories/stories/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this story model. 
     - parameter story: (body)  
     - returns: RequestBuilder<Story> 
     */
    open class func storiesStoriesUpdateWithRequestBuilder(id: Int, story: Story) -> RequestBuilder<Story> {
        var localVariablePath = "/stories/stories/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: story)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Story>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
