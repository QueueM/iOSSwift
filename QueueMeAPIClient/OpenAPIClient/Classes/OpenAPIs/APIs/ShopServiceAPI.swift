//
// ShopServiceAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ShopServiceAPI {

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopServiceCategoriesChoicesRetrieve(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ShopServiceCategoryModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopServiceCategoriesChoicesRetrieveWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /shop-service/categories/choices/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - returns: RequestBuilder<ShopServiceCategoryModel> 
     */
    open class func shopServiceCategoriesChoicesRetrieveWithRequestBuilder() -> RequestBuilder<ShopServiceCategoryModel> {
        let localVariablePath = "/shop-service/categories/choices/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ShopServiceCategoryModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter shopServiceCategoryModel: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopServiceCategoriesCreate(shopServiceCategoryModel: ShopServiceCategoryModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ShopServiceCategoryModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopServiceCategoriesCreateWithRequestBuilder(shopServiceCategoryModel: shopServiceCategoryModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /shop-service/categories/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter shopServiceCategoryModel: (body)  
     - returns: RequestBuilder<ShopServiceCategoryModel> 
     */
    open class func shopServiceCategoriesCreateWithRequestBuilder(shopServiceCategoryModel: ShopServiceCategoryModel) -> RequestBuilder<ShopServiceCategoryModel> {
        let localVariablePath = "/shop-service/categories/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: shopServiceCategoryModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ShopServiceCategoryModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Shop Service Category. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopServiceCategoriesDestroy(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return shopServiceCategoriesDestroyWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /shop-service/categories/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Shop Service Category. 
     - returns: RequestBuilder<Void> 
     */
    open class func shopServiceCategoriesDestroyWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/shop-service/categories/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter createdAt: (query)  (optional)
     - parameter forecastData: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter query: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopServiceCategoriesList(createdAt: Date? = nil, forecastData: String? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, query: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedShopServiceCategoryModelList?, _ error: Error?) -> Void)) -> RequestTask {
        return shopServiceCategoriesListWithRequestBuilder(createdAt: createdAt, forecastData: forecastData, name: name, ordering: ordering, page: page, pageSize: pageSize, query: query).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /shop-service/categories/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter createdAt: (query)  (optional)
     - parameter forecastData: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter query: (query)  (optional)
     - returns: RequestBuilder<PaginatedShopServiceCategoryModelList> 
     */
    open class func shopServiceCategoriesListWithRequestBuilder(createdAt: Date? = nil, forecastData: String? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, query: String? = nil) -> RequestBuilder<PaginatedShopServiceCategoryModelList> {
        let localVariablePath = "/shop-service/categories/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "created_at": (wrappedValue: createdAt?.encodeToJSON(), isExplode: true),
            "forecast_data": (wrappedValue: forecastData?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "query": (wrappedValue: query?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedShopServiceCategoryModelList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Shop Service Category. 
     - parameter patchedShopServiceCategoryModel: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopServiceCategoriesPartialUpdate(id: Int, patchedShopServiceCategoryModel: PatchedShopServiceCategoryModel? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ShopServiceCategoryModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopServiceCategoriesPartialUpdateWithRequestBuilder(id: id, patchedShopServiceCategoryModel: patchedShopServiceCategoryModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /shop-service/categories/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Shop Service Category. 
     - parameter patchedShopServiceCategoryModel: (body)  (optional)
     - returns: RequestBuilder<ShopServiceCategoryModel> 
     */
    open class func shopServiceCategoriesPartialUpdateWithRequestBuilder(id: Int, patchedShopServiceCategoryModel: PatchedShopServiceCategoryModel? = nil) -> RequestBuilder<ShopServiceCategoryModel> {
        var localVariablePath = "/shop-service/categories/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedShopServiceCategoryModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ShopServiceCategoryModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Shop Service Category. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopServiceCategoriesRetrieve(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ShopServiceCategoryModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopServiceCategoriesRetrieveWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /shop-service/categories/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Shop Service Category. 
     - returns: RequestBuilder<ShopServiceCategoryModel> 
     */
    open class func shopServiceCategoriesRetrieveWithRequestBuilder(id: Int) -> RequestBuilder<ShopServiceCategoryModel> {
        var localVariablePath = "/shop-service/categories/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ShopServiceCategoryModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Shop Service Category. 
     - parameter shopServiceCategoryModel: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopServiceCategoriesUpdate(id: Int, shopServiceCategoryModel: ShopServiceCategoryModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ShopServiceCategoryModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopServiceCategoriesUpdateWithRequestBuilder(id: id, shopServiceCategoryModel: shopServiceCategoryModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /shop-service/categories/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Shop Service Category. 
     - parameter shopServiceCategoryModel: (body)  
     - returns: RequestBuilder<ShopServiceCategoryModel> 
     */
    open class func shopServiceCategoriesUpdateWithRequestBuilder(id: Int, shopServiceCategoryModel: ShopServiceCategoryModel) -> RequestBuilder<ShopServiceCategoryModel> {
        var localVariablePath = "/shop-service/categories/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: shopServiceCategoryModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ShopServiceCategoryModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopServiceCouponsChoicesRetrieve(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceBookingDiscountCouponsModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopServiceCouponsChoicesRetrieveWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /shop-service/coupons/choices/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - returns: RequestBuilder<ServiceBookingDiscountCouponsModel> 
     */
    open class func shopServiceCouponsChoicesRetrieveWithRequestBuilder() -> RequestBuilder<ServiceBookingDiscountCouponsModel> {
        let localVariablePath = "/shop-service/coupons/choices/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceBookingDiscountCouponsModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter serviceBookingDiscountCouponsModel: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopServiceCouponsCreate(serviceBookingDiscountCouponsModel: ServiceBookingDiscountCouponsModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceBookingDiscountCouponsModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopServiceCouponsCreateWithRequestBuilder(serviceBookingDiscountCouponsModel: serviceBookingDiscountCouponsModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /shop-service/coupons/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter serviceBookingDiscountCouponsModel: (body)  
     - returns: RequestBuilder<ServiceBookingDiscountCouponsModel> 
     */
    open class func shopServiceCouponsCreateWithRequestBuilder(serviceBookingDiscountCouponsModel: ServiceBookingDiscountCouponsModel) -> RequestBuilder<ServiceBookingDiscountCouponsModel> {
        let localVariablePath = "/shop-service/coupons/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: serviceBookingDiscountCouponsModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceBookingDiscountCouponsModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Service Booking Discount Coupon. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopServiceCouponsDestroy(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return shopServiceCouponsDestroyWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /shop-service/coupons/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Service Booking Discount Coupon. 
     - returns: RequestBuilder<Void> 
     */
    open class func shopServiceCouponsDestroyWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/shop-service/coupons/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopServiceCouponsList(page: Int? = nil, pageSize: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedServiceBookingDiscountCouponsModelList?, _ error: Error?) -> Void)) -> RequestTask {
        return shopServiceCouponsListWithRequestBuilder(page: page, pageSize: pageSize).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /shop-service/coupons/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - returns: RequestBuilder<PaginatedServiceBookingDiscountCouponsModelList> 
     */
    open class func shopServiceCouponsListWithRequestBuilder(page: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<PaginatedServiceBookingDiscountCouponsModelList> {
        let localVariablePath = "/shop-service/coupons/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedServiceBookingDiscountCouponsModelList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Service Booking Discount Coupon. 
     - parameter patchedServiceBookingDiscountCouponsModel: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopServiceCouponsPartialUpdate(id: Int, patchedServiceBookingDiscountCouponsModel: PatchedServiceBookingDiscountCouponsModel? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceBookingDiscountCouponsModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopServiceCouponsPartialUpdateWithRequestBuilder(id: id, patchedServiceBookingDiscountCouponsModel: patchedServiceBookingDiscountCouponsModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /shop-service/coupons/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Service Booking Discount Coupon. 
     - parameter patchedServiceBookingDiscountCouponsModel: (body)  (optional)
     - returns: RequestBuilder<ServiceBookingDiscountCouponsModel> 
     */
    open class func shopServiceCouponsPartialUpdateWithRequestBuilder(id: Int, patchedServiceBookingDiscountCouponsModel: PatchedServiceBookingDiscountCouponsModel? = nil) -> RequestBuilder<ServiceBookingDiscountCouponsModel> {
        var localVariablePath = "/shop-service/coupons/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedServiceBookingDiscountCouponsModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceBookingDiscountCouponsModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Service Booking Discount Coupon. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopServiceCouponsRetrieve(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceBookingDiscountCouponsModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopServiceCouponsRetrieveWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /shop-service/coupons/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Service Booking Discount Coupon. 
     - returns: RequestBuilder<ServiceBookingDiscountCouponsModel> 
     */
    open class func shopServiceCouponsRetrieveWithRequestBuilder(id: Int) -> RequestBuilder<ServiceBookingDiscountCouponsModel> {
        var localVariablePath = "/shop-service/coupons/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceBookingDiscountCouponsModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Service Booking Discount Coupon. 
     - parameter serviceBookingDiscountCouponsModel: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopServiceCouponsUpdate(id: Int, serviceBookingDiscountCouponsModel: ServiceBookingDiscountCouponsModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceBookingDiscountCouponsModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopServiceCouponsUpdateWithRequestBuilder(id: id, serviceBookingDiscountCouponsModel: serviceBookingDiscountCouponsModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /shop-service/coupons/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Service Booking Discount Coupon. 
     - parameter serviceBookingDiscountCouponsModel: (body)  
     - returns: RequestBuilder<ServiceBookingDiscountCouponsModel> 
     */
    open class func shopServiceCouponsUpdateWithRequestBuilder(id: Int, serviceBookingDiscountCouponsModel: ServiceBookingDiscountCouponsModel) -> RequestBuilder<ServiceBookingDiscountCouponsModel> {
        var localVariablePath = "/shop-service/coupons/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: serviceBookingDiscountCouponsModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceBookingDiscountCouponsModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopServiceGalleryChoicesRetrieve(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ShopServiceGalleryModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopServiceGalleryChoicesRetrieveWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /shop-service/gallery/choices/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - returns: RequestBuilder<ShopServiceGalleryModel> 
     */
    open class func shopServiceGalleryChoicesRetrieveWithRequestBuilder() -> RequestBuilder<ShopServiceGalleryModel> {
        let localVariablePath = "/shop-service/gallery/choices/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ShopServiceGalleryModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter shopServiceGalleryModel: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopServiceGalleryCreate(shopServiceGalleryModel: ShopServiceGalleryModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ShopServiceGalleryModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopServiceGalleryCreateWithRequestBuilder(shopServiceGalleryModel: shopServiceGalleryModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /shop-service/gallery/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter shopServiceGalleryModel: (body)  
     - returns: RequestBuilder<ShopServiceGalleryModel> 
     */
    open class func shopServiceGalleryCreateWithRequestBuilder(shopServiceGalleryModel: ShopServiceGalleryModel) -> RequestBuilder<ShopServiceGalleryModel> {
        let localVariablePath = "/shop-service/gallery/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: shopServiceGalleryModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ShopServiceGalleryModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Shop Service Gallery Item. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopServiceGalleryDestroy(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return shopServiceGalleryDestroyWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /shop-service/gallery/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Shop Service Gallery Item. 
     - returns: RequestBuilder<Void> 
     */
    open class func shopServiceGalleryDestroyWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/shop-service/gallery/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter service: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopServiceGalleryList(ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, service: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedShopServiceGalleryModelList?, _ error: Error?) -> Void)) -> RequestTask {
        return shopServiceGalleryListWithRequestBuilder(ordering: ordering, page: page, pageSize: pageSize, service: service).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /shop-service/gallery/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter service: (query)  (optional)
     - returns: RequestBuilder<PaginatedShopServiceGalleryModelList> 
     */
    open class func shopServiceGalleryListWithRequestBuilder(ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, service: Int? = nil) -> RequestBuilder<PaginatedShopServiceGalleryModelList> {
        let localVariablePath = "/shop-service/gallery/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "service": (wrappedValue: service?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedShopServiceGalleryModelList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Shop Service Gallery Item. 
     - parameter patchedShopServiceGalleryModel: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopServiceGalleryPartialUpdate(id: Int, patchedShopServiceGalleryModel: PatchedShopServiceGalleryModel? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ShopServiceGalleryModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopServiceGalleryPartialUpdateWithRequestBuilder(id: id, patchedShopServiceGalleryModel: patchedShopServiceGalleryModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /shop-service/gallery/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Shop Service Gallery Item. 
     - parameter patchedShopServiceGalleryModel: (body)  (optional)
     - returns: RequestBuilder<ShopServiceGalleryModel> 
     */
    open class func shopServiceGalleryPartialUpdateWithRequestBuilder(id: Int, patchedShopServiceGalleryModel: PatchedShopServiceGalleryModel? = nil) -> RequestBuilder<ShopServiceGalleryModel> {
        var localVariablePath = "/shop-service/gallery/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedShopServiceGalleryModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ShopServiceGalleryModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Shop Service Gallery Item. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopServiceGalleryRetrieve(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ShopServiceGalleryModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopServiceGalleryRetrieveWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /shop-service/gallery/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Shop Service Gallery Item. 
     - returns: RequestBuilder<ShopServiceGalleryModel> 
     */
    open class func shopServiceGalleryRetrieveWithRequestBuilder(id: Int) -> RequestBuilder<ShopServiceGalleryModel> {
        var localVariablePath = "/shop-service/gallery/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ShopServiceGalleryModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Shop Service Gallery Item. 
     - parameter shopServiceGalleryModel: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopServiceGalleryUpdate(id: Int, shopServiceGalleryModel: ShopServiceGalleryModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ShopServiceGalleryModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopServiceGalleryUpdateWithRequestBuilder(id: id, shopServiceGalleryModel: shopServiceGalleryModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /shop-service/gallery/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Shop Service Gallery Item. 
     - parameter shopServiceGalleryModel: (body)  
     - returns: RequestBuilder<ShopServiceGalleryModel> 
     */
    open class func shopServiceGalleryUpdateWithRequestBuilder(id: Int, shopServiceGalleryModel: ShopServiceGalleryModel) -> RequestBuilder<ShopServiceGalleryModel> {
        var localVariablePath = "/shop-service/gallery/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: shopServiceGalleryModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ShopServiceGalleryModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopServiceServiceExtendedDetailsChoicesRetrieve(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceExtendedDetailsModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopServiceServiceExtendedDetailsChoicesRetrieveWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /shop-service/service-extended-details/choices/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - returns: RequestBuilder<ServiceExtendedDetailsModel> 
     */
    open class func shopServiceServiceExtendedDetailsChoicesRetrieveWithRequestBuilder() -> RequestBuilder<ServiceExtendedDetailsModel> {
        let localVariablePath = "/shop-service/service-extended-details/choices/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceExtendedDetailsModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter serviceExtendedDetailsModel: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopServiceServiceExtendedDetailsCreate(serviceExtendedDetailsModel: ServiceExtendedDetailsModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceExtendedDetailsModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopServiceServiceExtendedDetailsCreateWithRequestBuilder(serviceExtendedDetailsModel: serviceExtendedDetailsModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /shop-service/service-extended-details/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter serviceExtendedDetailsModel: (body)  
     - returns: RequestBuilder<ServiceExtendedDetailsModel> 
     */
    open class func shopServiceServiceExtendedDetailsCreateWithRequestBuilder(serviceExtendedDetailsModel: ServiceExtendedDetailsModel) -> RequestBuilder<ServiceExtendedDetailsModel> {
        let localVariablePath = "/shop-service/service-extended-details/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: serviceExtendedDetailsModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceExtendedDetailsModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Service Extended Detail. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopServiceServiceExtendedDetailsDestroy(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return shopServiceServiceExtendedDetailsDestroyWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /shop-service/service-extended-details/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Service Extended Detail. 
     - returns: RequestBuilder<Void> 
     */
    open class func shopServiceServiceExtendedDetailsDestroyWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/shop-service/service-extended-details/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopServiceServiceExtendedDetailsList(page: Int? = nil, pageSize: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedServiceExtendedDetailsModelList?, _ error: Error?) -> Void)) -> RequestTask {
        return shopServiceServiceExtendedDetailsListWithRequestBuilder(page: page, pageSize: pageSize).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /shop-service/service-extended-details/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - returns: RequestBuilder<PaginatedServiceExtendedDetailsModelList> 
     */
    open class func shopServiceServiceExtendedDetailsListWithRequestBuilder(page: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<PaginatedServiceExtendedDetailsModelList> {
        let localVariablePath = "/shop-service/service-extended-details/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedServiceExtendedDetailsModelList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Service Extended Detail. 
     - parameter patchedServiceExtendedDetailsModel: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopServiceServiceExtendedDetailsPartialUpdate(id: Int, patchedServiceExtendedDetailsModel: PatchedServiceExtendedDetailsModel? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceExtendedDetailsModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopServiceServiceExtendedDetailsPartialUpdateWithRequestBuilder(id: id, patchedServiceExtendedDetailsModel: patchedServiceExtendedDetailsModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /shop-service/service-extended-details/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Service Extended Detail. 
     - parameter patchedServiceExtendedDetailsModel: (body)  (optional)
     - returns: RequestBuilder<ServiceExtendedDetailsModel> 
     */
    open class func shopServiceServiceExtendedDetailsPartialUpdateWithRequestBuilder(id: Int, patchedServiceExtendedDetailsModel: PatchedServiceExtendedDetailsModel? = nil) -> RequestBuilder<ServiceExtendedDetailsModel> {
        var localVariablePath = "/shop-service/service-extended-details/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedServiceExtendedDetailsModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceExtendedDetailsModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Service Extended Detail. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopServiceServiceExtendedDetailsRetrieve(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceExtendedDetailsModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopServiceServiceExtendedDetailsRetrieveWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /shop-service/service-extended-details/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Service Extended Detail. 
     - returns: RequestBuilder<ServiceExtendedDetailsModel> 
     */
    open class func shopServiceServiceExtendedDetailsRetrieveWithRequestBuilder(id: Int) -> RequestBuilder<ServiceExtendedDetailsModel> {
        var localVariablePath = "/shop-service/service-extended-details/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceExtendedDetailsModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Service Extended Detail. 
     - parameter serviceExtendedDetailsModel: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopServiceServiceExtendedDetailsUpdate(id: Int, serviceExtendedDetailsModel: ServiceExtendedDetailsModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceExtendedDetailsModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopServiceServiceExtendedDetailsUpdateWithRequestBuilder(id: id, serviceExtendedDetailsModel: serviceExtendedDetailsModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /shop-service/service-extended-details/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Service Extended Detail. 
     - parameter serviceExtendedDetailsModel: (body)  
     - returns: RequestBuilder<ServiceExtendedDetailsModel> 
     */
    open class func shopServiceServiceExtendedDetailsUpdateWithRequestBuilder(id: Int, serviceExtendedDetailsModel: ServiceExtendedDetailsModel) -> RequestBuilder<ServiceExtendedDetailsModel> {
        var localVariablePath = "/shop-service/service-extended-details/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: serviceExtendedDetailsModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceExtendedDetailsModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopServiceServicesBookingsChoicesRetrieve(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceBookingDetailsModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopServiceServicesBookingsChoicesRetrieveWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /shop-service/services-bookings/choices/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - returns: RequestBuilder<ServiceBookingDetailsModel> 
     */
    open class func shopServiceServicesBookingsChoicesRetrieveWithRequestBuilder() -> RequestBuilder<ServiceBookingDetailsModel> {
        let localVariablePath = "/shop-service/services-bookings/choices/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceBookingDetailsModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter serviceBookingDetailsModel: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopServiceServicesBookingsCreate(serviceBookingDetailsModel: ServiceBookingDetailsModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceBookingDetailsModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopServiceServicesBookingsCreateWithRequestBuilder(serviceBookingDetailsModel: serviceBookingDetailsModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /shop-service/services-bookings/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter serviceBookingDetailsModel: (body)  
     - returns: RequestBuilder<ServiceBookingDetailsModel> 
     */
    open class func shopServiceServicesBookingsCreateWithRequestBuilder(serviceBookingDetailsModel: ServiceBookingDetailsModel) -> RequestBuilder<ServiceBookingDetailsModel> {
        let localVariablePath = "/shop-service/services-bookings/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: serviceBookingDetailsModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceBookingDetailsModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Service Booking Detail. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopServiceServicesBookingsDestroy(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return shopServiceServicesBookingsDestroyWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /shop-service/services-bookings/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Service Booking Detail. 
     - returns: RequestBuilder<Void> 
     */
    open class func shopServiceServicesBookingsDestroyWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/shop-service/services-bookings/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter paymentStatus
     */
    public enum PaymentStatus_shopServiceServicesBookingsList: String, CaseIterable {
        case paid = "paid"
        case pending = "pending"
        case unpaid = "unpaid"
    }

    /**
     * enum for parameter status
     */
    public enum Status_shopServiceServicesBookingsList: String, CaseIterable {
        case booked = "booked"
        case cancelled = "cancelled"
        case completed = "completed"
        case requested = "requested"
    }

    /**

     - parameter bookingDateAfter: (query)  (optional)
     - parameter bookingDateBefore: (query)  (optional)
     - parameter bookingTime: (query)  (optional)
     - parameter customer: (query)  (optional)
     - parameter finalAmount: (query)  (optional)
     - parameter fraudFlag: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter paymentStatus: (query) * &#x60;unpaid&#x60; - Unpaid * &#x60;pending&#x60; - Pending * &#x60;paid&#x60; - Paid (optional)
     - parameter price: (query)  (optional)
     - parameter query: (query)  (optional)
     - parameter service: (query)  (optional)
     - parameter status: (query) * &#x60;requested&#x60; - Requested * &#x60;booked&#x60; - Booked * &#x60;completed&#x60; - Completed * &#x60;cancelled&#x60; - Cancelled (optional)
     - parameter user: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopServiceServicesBookingsList(bookingDateAfter: Date? = nil, bookingDateBefore: Date? = nil, bookingTime: String? = nil, customer: Int? = nil, finalAmount: Double? = nil, fraudFlag: Bool? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, paymentStatus: PaymentStatus_shopServiceServicesBookingsList? = nil, price: Double? = nil, query: String? = nil, service: Int? = nil, status: Status_shopServiceServicesBookingsList? = nil, user: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedServiceBookingDetailsModelList?, _ error: Error?) -> Void)) -> RequestTask {
        return shopServiceServicesBookingsListWithRequestBuilder(bookingDateAfter: bookingDateAfter, bookingDateBefore: bookingDateBefore, bookingTime: bookingTime, customer: customer, finalAmount: finalAmount, fraudFlag: fraudFlag, ordering: ordering, page: page, pageSize: pageSize, paymentStatus: paymentStatus, price: price, query: query, service: service, status: status, user: user).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /shop-service/services-bookings/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter bookingDateAfter: (query)  (optional)
     - parameter bookingDateBefore: (query)  (optional)
     - parameter bookingTime: (query)  (optional)
     - parameter customer: (query)  (optional)
     - parameter finalAmount: (query)  (optional)
     - parameter fraudFlag: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter paymentStatus: (query) * &#x60;unpaid&#x60; - Unpaid * &#x60;pending&#x60; - Pending * &#x60;paid&#x60; - Paid (optional)
     - parameter price: (query)  (optional)
     - parameter query: (query)  (optional)
     - parameter service: (query)  (optional)
     - parameter status: (query) * &#x60;requested&#x60; - Requested * &#x60;booked&#x60; - Booked * &#x60;completed&#x60; - Completed * &#x60;cancelled&#x60; - Cancelled (optional)
     - parameter user: (query)  (optional)
     - returns: RequestBuilder<PaginatedServiceBookingDetailsModelList> 
     */
    open class func shopServiceServicesBookingsListWithRequestBuilder(bookingDateAfter: Date? = nil, bookingDateBefore: Date? = nil, bookingTime: String? = nil, customer: Int? = nil, finalAmount: Double? = nil, fraudFlag: Bool? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, paymentStatus: PaymentStatus_shopServiceServicesBookingsList? = nil, price: Double? = nil, query: String? = nil, service: Int? = nil, status: Status_shopServiceServicesBookingsList? = nil, user: Int? = nil) -> RequestBuilder<PaginatedServiceBookingDetailsModelList> {
        let localVariablePath = "/shop-service/services-bookings/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "booking_date_after": (wrappedValue: bookingDateAfter?.encodeToJSON(), isExplode: true),
            "booking_date_before": (wrappedValue: bookingDateBefore?.encodeToJSON(), isExplode: true),
            "booking_time": (wrappedValue: bookingTime?.encodeToJSON(), isExplode: true),
            "customer": (wrappedValue: customer?.encodeToJSON(), isExplode: true),
            "final_amount": (wrappedValue: finalAmount?.encodeToJSON(), isExplode: true),
            "fraud_flag": (wrappedValue: fraudFlag?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "payment_status": (wrappedValue: paymentStatus?.encodeToJSON(), isExplode: true),
            "price": (wrappedValue: price?.encodeToJSON(), isExplode: true),
            "query": (wrappedValue: query?.encodeToJSON(), isExplode: true),
            "service": (wrappedValue: service?.encodeToJSON(), isExplode: true),
            "status": (wrappedValue: status?.encodeToJSON(), isExplode: true),
            "user": (wrappedValue: user?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedServiceBookingDetailsModelList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Service Booking Detail. 
     - parameter patchedServiceBookingDetailsModel: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopServiceServicesBookingsPartialUpdate(id: Int, patchedServiceBookingDetailsModel: PatchedServiceBookingDetailsModel? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceBookingDetailsModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopServiceServicesBookingsPartialUpdateWithRequestBuilder(id: id, patchedServiceBookingDetailsModel: patchedServiceBookingDetailsModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /shop-service/services-bookings/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Service Booking Detail. 
     - parameter patchedServiceBookingDetailsModel: (body)  (optional)
     - returns: RequestBuilder<ServiceBookingDetailsModel> 
     */
    open class func shopServiceServicesBookingsPartialUpdateWithRequestBuilder(id: Int, patchedServiceBookingDetailsModel: PatchedServiceBookingDetailsModel? = nil) -> RequestBuilder<ServiceBookingDetailsModel> {
        var localVariablePath = "/shop-service/services-bookings/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedServiceBookingDetailsModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceBookingDetailsModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Service Booking Detail. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopServiceServicesBookingsRetrieve(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceBookingDetailsModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopServiceServicesBookingsRetrieveWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /shop-service/services-bookings/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Service Booking Detail. 
     - returns: RequestBuilder<ServiceBookingDetailsModel> 
     */
    open class func shopServiceServicesBookingsRetrieveWithRequestBuilder(id: Int) -> RequestBuilder<ServiceBookingDetailsModel> {
        var localVariablePath = "/shop-service/services-bookings/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceBookingDetailsModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Service Booking Detail. 
     - parameter serviceBookingDetailsModel: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopServiceServicesBookingsUpdate(id: Int, serviceBookingDetailsModel: ServiceBookingDetailsModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceBookingDetailsModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopServiceServicesBookingsUpdateWithRequestBuilder(id: id, serviceBookingDetailsModel: serviceBookingDetailsModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /shop-service/services-bookings/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Service Booking Detail. 
     - parameter serviceBookingDetailsModel: (body)  
     - returns: RequestBuilder<ServiceBookingDetailsModel> 
     */
    open class func shopServiceServicesBookingsUpdateWithRequestBuilder(id: Int, serviceBookingDetailsModel: ServiceBookingDetailsModel) -> RequestBuilder<ServiceBookingDetailsModel> {
        var localVariablePath = "/shop-service/services-bookings/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: serviceBookingDetailsModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceBookingDetailsModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopServiceServicesChoicesRetrieve(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ShopServiceDetailsModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopServiceServicesChoicesRetrieveWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /shop-service/services/choices/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - returns: RequestBuilder<ShopServiceDetailsModel> 
     */
    open class func shopServiceServicesChoicesRetrieveWithRequestBuilder() -> RequestBuilder<ShopServiceDetailsModel> {
        let localVariablePath = "/shop-service/services/choices/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ShopServiceDetailsModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter shopServiceDetailsModel: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopServiceServicesCreate(shopServiceDetailsModel: ShopServiceDetailsModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ShopServiceDetailsModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopServiceServicesCreateWithRequestBuilder(shopServiceDetailsModel: shopServiceDetailsModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /shop-service/services/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter shopServiceDetailsModel: (body)  
     - returns: RequestBuilder<ShopServiceDetailsModel> 
     */
    open class func shopServiceServicesCreateWithRequestBuilder(shopServiceDetailsModel: ShopServiceDetailsModel) -> RequestBuilder<ShopServiceDetailsModel> {
        let localVariablePath = "/shop-service/services/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: shopServiceDetailsModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ShopServiceDetailsModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Shop Service Detail. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopServiceServicesDestroy(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return shopServiceServicesDestroyWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /shop-service/services/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Shop Service Detail. 
     - returns: RequestBuilder<Void> 
     */
    open class func shopServiceServicesDestroyWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/shop-service/services/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter serviceType
     */
    public enum ServiceType_shopServiceServicesList: String, CaseIterable {
        case atHome = "at_home"
        case both = "both"
        case inShop = "in_shop"
    }

    /**

     - parameter category: (query)  (optional)
     - parameter description: (query)  (optional)
     - parameter duration: (query)  (optional)
     - parameter isAvailable: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter nameArabic: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter price: (query)  (optional)
     - parameter query: (query)  (optional)
     - parameter serviceType: (query) * &#x60;in_shop&#x60; - In Shop * &#x60;at_home&#x60; - At Home * &#x60;both&#x60; - Both (optional)
     - parameter shop: (query)  (optional)
     - parameter specialists: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopServiceServicesList(category: Int? = nil, description: String? = nil, duration: String? = nil, isAvailable: Bool? = nil, name: String? = nil, nameArabic: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, price: Double? = nil, query: String? = nil, serviceType: ServiceType_shopServiceServicesList? = nil, shop: Int? = nil, specialists: [Int]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedShopServiceDetailsModelList?, _ error: Error?) -> Void)) -> RequestTask {
        return shopServiceServicesListWithRequestBuilder(category: category, description: description, duration: duration, isAvailable: isAvailable, name: name, nameArabic: nameArabic, ordering: ordering, page: page, pageSize: pageSize, price: price, query: query, serviceType: serviceType, shop: shop, specialists: specialists).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /shop-service/services/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter category: (query)  (optional)
     - parameter description: (query)  (optional)
     - parameter duration: (query)  (optional)
     - parameter isAvailable: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter nameArabic: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter price: (query)  (optional)
     - parameter query: (query)  (optional)
     - parameter serviceType: (query) * &#x60;in_shop&#x60; - In Shop * &#x60;at_home&#x60; - At Home * &#x60;both&#x60; - Both (optional)
     - parameter shop: (query)  (optional)
     - parameter specialists: (query)  (optional)
     - returns: RequestBuilder<PaginatedShopServiceDetailsModelList> 
     */
    open class func shopServiceServicesListWithRequestBuilder(category: Int? = nil, description: String? = nil, duration: String? = nil, isAvailable: Bool? = nil, name: String? = nil, nameArabic: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, price: Double? = nil, query: String? = nil, serviceType: ServiceType_shopServiceServicesList? = nil, shop: Int? = nil, specialists: [Int]? = nil) -> RequestBuilder<PaginatedShopServiceDetailsModelList> {
        let localVariablePath = "/shop-service/services/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "category": (wrappedValue: category?.encodeToJSON(), isExplode: true),
            "description": (wrappedValue: description?.encodeToJSON(), isExplode: true),
            "duration": (wrappedValue: duration?.encodeToJSON(), isExplode: true),
            "is_available": (wrappedValue: isAvailable?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "name_arabic": (wrappedValue: nameArabic?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "price": (wrappedValue: price?.encodeToJSON(), isExplode: true),
            "query": (wrappedValue: query?.encodeToJSON(), isExplode: true),
            "service_type": (wrappedValue: serviceType?.encodeToJSON(), isExplode: true),
            "shop": (wrappedValue: shop?.encodeToJSON(), isExplode: true),
            "specialists": (wrappedValue: specialists?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedShopServiceDetailsModelList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Shop Service Detail. 
     - parameter patchedShopServiceDetailsModel: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopServiceServicesPartialUpdate(id: Int, patchedShopServiceDetailsModel: PatchedShopServiceDetailsModel? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ShopServiceDetailsModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopServiceServicesPartialUpdateWithRequestBuilder(id: id, patchedShopServiceDetailsModel: patchedShopServiceDetailsModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /shop-service/services/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Shop Service Detail. 
     - parameter patchedShopServiceDetailsModel: (body)  (optional)
     - returns: RequestBuilder<ShopServiceDetailsModel> 
     */
    open class func shopServiceServicesPartialUpdateWithRequestBuilder(id: Int, patchedShopServiceDetailsModel: PatchedShopServiceDetailsModel? = nil) -> RequestBuilder<ShopServiceDetailsModel> {
        var localVariablePath = "/shop-service/services/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedShopServiceDetailsModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ShopServiceDetailsModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Shop Service Detail. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopServiceServicesRetrieve(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ShopServiceDetailsModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopServiceServicesRetrieveWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /shop-service/services/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Shop Service Detail. 
     - returns: RequestBuilder<ShopServiceDetailsModel> 
     */
    open class func shopServiceServicesRetrieveWithRequestBuilder(id: Int) -> RequestBuilder<ShopServiceDetailsModel> {
        var localVariablePath = "/shop-service/services/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ShopServiceDetailsModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Shop Service Detail. 
     - parameter shopServiceDetailsModel: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shopServiceServicesUpdate(id: Int, shopServiceDetailsModel: ShopServiceDetailsModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ShopServiceDetailsModel?, _ error: Error?) -> Void)) -> RequestTask {
        return shopServiceServicesUpdateWithRequestBuilder(id: id, shopServiceDetailsModel: shopServiceDetailsModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /shop-service/services/{id}/
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter id: (path) A unique integer value identifying this Shop Service Detail. 
     - parameter shopServiceDetailsModel: (body)  
     - returns: RequestBuilder<ShopServiceDetailsModel> 
     */
    open class func shopServiceServicesUpdateWithRequestBuilder(id: Int, shopServiceDetailsModel: ShopServiceDetailsModel) -> RequestBuilder<ShopServiceDetailsModel> {
        var localVariablePath = "/shop-service/services/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: shopServiceDetailsModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ShopServiceDetailsModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
