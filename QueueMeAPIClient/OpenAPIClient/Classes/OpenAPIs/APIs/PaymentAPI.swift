//
// PaymentAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class PaymentAPI {

    /**

     - parameter paymentCreateRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func paymentCreateCreate(paymentCreateRequest: PaymentCreateRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaymentCreateResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return paymentCreateCreateWithRequestBuilder(paymentCreateRequest: paymentCreateRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /payment/create/
     - Initiates a payment.
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter paymentCreateRequest: (body)  
     - returns: RequestBuilder<PaymentCreateResponse> 
     */
    open class func paymentCreateCreateWithRequestBuilder(paymentCreateRequest: PaymentCreateRequest) -> RequestBuilder<PaymentCreateResponse> {
        let localVariablePath = "/payment/create/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: paymentCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaymentCreateResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func paymentDemoRetrieve(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: DemoPaymentResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return paymentDemoRetrieveWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /payment/demo/
     - Demo endpoint for payment creation.
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - returns: RequestBuilder<DemoPaymentResponse> 
     */
    open class func paymentDemoRetrieveWithRequestBuilder() -> RequestBuilder<DemoPaymentResponse> {
        let localVariablePath = "/payment/demo/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DemoPaymentResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter paymentProcessingRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func paymentProcessCreate(paymentProcessingRequest: PaymentProcessingRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaymentProcessingResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return paymentProcessCreateWithRequestBuilder(paymentProcessingRequest: paymentProcessingRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /payment/process/
     - Verifies payment callback processing.
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter paymentProcessingRequest: (body)  
     - returns: RequestBuilder<PaymentProcessingResponse> 
     */
    open class func paymentProcessCreateWithRequestBuilder(paymentProcessingRequest: PaymentProcessingRequest) -> RequestBuilder<PaymentProcessingResponse> {
        let localVariablePath = "/payment/process/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: paymentProcessingRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaymentProcessingResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter webhookRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func paymentWebhookCreate(webhookRequest: WebhookRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: WebhookResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return paymentWebhookCreateWithRequestBuilder(webhookRequest: webhookRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /payment/webhook/
     - Processes payment gateway webhooks.
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter webhookRequest: (body)  
     - returns: RequestBuilder<WebhookResponse> 
     */
    open class func paymentWebhookCreateWithRequestBuilder(webhookRequest: WebhookRequest) -> RequestBuilder<WebhookResponse> {
        let localVariablePath = "/payment/webhook/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: webhookRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WebhookResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
