//
// SubscriptionsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class SubscriptionsAPI {

    /**

     - parameter subscriptionPaymentIntegrationRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func subscriptionsIntegratePaymentCreate(subscriptionPaymentIntegrationRequest: SubscriptionPaymentIntegrationRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SubscriptionPaymentIntegrationResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return subscriptionsIntegratePaymentCreateWithRequestBuilder(subscriptionPaymentIntegrationRequest: subscriptionPaymentIntegrationRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /subscriptions/integrate-payment/
     - POST /subscription/integrate-payment/ Integrates a completed payment with a company's subscription.
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter subscriptionPaymentIntegrationRequest: (body)  
     - returns: RequestBuilder<SubscriptionPaymentIntegrationResponse> 
     */
    open class func subscriptionsIntegratePaymentCreateWithRequestBuilder(subscriptionPaymentIntegrationRequest: SubscriptionPaymentIntegrationRequest) -> RequestBuilder<SubscriptionPaymentIntegrationResponse> {
        let localVariablePath = "/subscriptions/integrate-payment/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: subscriptionPaymentIntegrationRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SubscriptionPaymentIntegrationResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter planId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func subscriptionsPlansRetrieve(planId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CompanySubscriptionPlan?, _ error: Error?) -> Void)) -> RequestTask {
        return subscriptionsPlansRetrieveWithRequestBuilder(planId: planId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /subscriptions/plans/{plan_id}/
     - GET /subscription/plans/{plan_id}/ Retrieves detailed info about a specific subscription plan.
     - Bearer Token:
       - type: http
       - name: jwtAuth
     - parameter planId: (path)  
     - returns: RequestBuilder<CompanySubscriptionPlan> 
     */
    open class func subscriptionsPlansRetrieveWithRequestBuilder(planId: Int) -> RequestBuilder<CompanySubscriptionPlan> {
        var localVariablePath = "/subscriptions/plans/{plan_id}/"
        let planIdPreEscape = "\(APIHelper.mapValueToPathItem(planId))"
        let planIdPostEscape = planIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{plan_id}", with: planIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CompanySubscriptionPlan>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
